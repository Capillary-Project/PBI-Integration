table New_Table
	lineageTag: e6cc280c-6ec4-4e1d-8cac-706e02a52386

	measure 'web active users' = ```
			[total users] - [app active users]
			// VAR wau = 
			//     CALCULATE(
			//         DISTINCTCOUNT('customer_contact_info_marketing'[user_id]),
			//         USERELATIONSHIP(customer_contact_info_marketing[user_id], member_last_activity_bi[user_id]),
			//         USERELATIONSHIP(date_table[date], customer_contact_info_marketing[date]),
			//         FILTER(
			//             member_last_activity_bi, 
			//             member_last_activity_bi[platform] = "web"
			//         )
			//         // You can uncomment below if you want to filter by action in the future
			//         // FILTER(tracking_action_events, tracking_action_events[action] = "logged in")
			//     )
			// var totalusers = CALCULATE(DISTINCTCOUNT(member_last_activity_bi[user_id]),member_last_activity_bi[platform] = "web",USERELATIONSHIP(date_table[date],member_last_activity_bi[last_session_date]))
			// RETURN
			// IF(ISBLANK(totalusers), 0, totalusers)
			
			// VAR WebUsers = 
			//     CALCULATETABLE(
			//         VALUES(member_last_activity_bi[user_id]),
			//         member_last_activity_bi[platform] = "web",
			//         USERELATIONSHIP(date_table[date], member_last_activity_bi[last_session_date]))
			// VAR AppUsers = 
			//     CALCULATETABLE(
			//         VALUES(member_last_activity_bi[user_id]),
			//         member_last_activity_bi[platform] = "app",
			//         USERELATIONSHIP(date_table[date], member_last_activity_bi[last_session_date]))
			// VAR WebOnlyUsers = 
			//     EXCEPT(WebUsers, AppUsers) 
			
			// RETURN 
			//    IF(ISBLANK(COUNTROWS(WebOnlyUsers)),0,(COUNTROWS(WebOnlyUsers)))
			
			
			```
		formatString: #,0
		lineageTag: ac2e5285-2549-486f-9635-3fc5c65ce326

	measure unsubscribe = ```
			
			
			// var a = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]),customer_contact_info_marketing[channel] <> "DM", customer_contact_info_marketing[campaign_legend_lebel] = "Marked Unsubscribe")
			// var b = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			// var c = DIVIDE(a,b, 0)
			// RETURN 
			// IF(ISBLANK(c),0,c)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// -- Numerator: Users who unsubscribed
			// VAR a =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//             customer_contact_info_marketing[campaign_legend_lebel] = "Marked Unsubscribe",
			//             FILTER(
			//                 customer_contact_info_marketing,
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign &&
			//                 customer_contact_info_marketing[campaign_start_date] <= MAX('date_table'[date]) &&
			//                 customer_contact_info_marketing[campaign_end_date] >= MIN('date_table'[date])
			//             )
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//             customer_contact_info_marketing[campaign_legend_lebel] = "Marked Unsubscribe"
			//         )
			//     )
			
			// -- Denominator: Total users in the same context
			// // VAR b =
			// //     IF(
			// //         NOT ISBLANK(SelectedCampaign),
			// //         CALCULATE(
			// //             DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			// //             FILTER(
			// //                 customer_contact_info_marketing,
			// //                 customer_contact_info_marketing[campaign_name] = SelectedCampaign &&
			// //                 customer_contact_info_marketing[campaign_start_date] <= MAX('date_table'[date]) &&
			// //                 customer_contact_info_marketing[campaign_end_date] >= MIN('date_table'[date])
			// //             )
			// //         ),
			// //         CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			// //     )
			
			// -- % Calculation
			// VAR c = DIVIDE(a, [email sent], 0)
			
			// RETURN 
			// IF(ISBLANK(c), 0, c)
			
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			VAR a =
			    CALCULATE(
			        DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			        FILTER(
			            customer_contact_info_marketing,
			            customer_contact_info_marketing[campaign_legend_lebel] = "Marked Unsubscribe" &&
			            (
			                ISBLANK(SelectedCampaign) ||
			                customer_contact_info_marketing[campaign_name] = SelectedCampaign
			            )
			        )
			    )
			
			VAR c = DIVIDE(a, [email delivered], 0)
			
			RETURN
			IF(ISBLANK(c), 0, c)
			
			```
		formatString: 0%;-0%;0%
		lineageTag: 7ec11e5c-cb3c-4265-9a29-d3103f3a9629

	measure 'unique members touched' = ```
			
			// var a = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			// // USERELATIONSHIP(date_table[date],customer_contact_info_marketing[date]))
			// RETURN
			// IF(ISBLANK(a),0,a)
			// unique members touched = 
			// unique members touched = 
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// VAR Result =
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//         // Apply campaign filter only if campaign is selected
			//         FILTER(
			//             customer_contact_info_marketing,
			//             ISBLANK(SelectedCampaign) ||
			//             customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//         )    )
			// RETURN
			// IF(ISBLANK(Result), 0, Result)
			// _________________________________________
			
			// -- Step 1: Get selected campaign from slicer
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			 
			// -- Step 2: Filtered list of user_ids for the selected campaign
			// VAR CampaignFilteredUsers =
			//     SELECTCOLUMNS(
			//         FILTER(
			//             customer_contact_info_marketing,
			//             ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//         ),
			//         "user_id", customer_contact_info_marketing[user_id]
			//     )
			 
			// -- Step 3: Calculate distinct count using TREATAS to apply user_id filter
			// VAR a =
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//         TREATAS(CampaignFilteredUsers, customer_contact_info_marketing[user_id])
			//     )
			 
			// -- Step 4: Return 0 if blank
			// RETURN
			// IF(ISBLANK(a), 0, a)
			
			
			
			
			
			-- Step 1: Get selected campaign from slicer
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Step 2: Apply filters directly in CALCULATE
			// VAR a =
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			        
			//         -- Campaign filter (only if selected)
			//         IF(
			//             ISBLANK(SelectedCampaign),
			//             TRUE(),
			//             customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//         ),
			        
			//         -- Keep client-level granularity
			//         ALLEXCEPT(member_dimension, member_dimension[client_id_name]),
			        
			//         -- Apply inactive relationship with date table
			//         USERELATIONSHIP(date_table[date], customer_contact_info_marketing[date])
			//     )
			
			-- Step 3: Return 0 if blank
			// RETURN
			// IF(ISBLANK(a), 0, a)
			
			
			
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			VAR a =
			    CALCULATE(
			        DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			
			        -- Campaign filter (only if selected)
			        IF(
			            ISBLANK(SelectedCampaign),
			            TRUE(),
			            customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			
			        -- Keep client-level granularity
			        ALLEXCEPT(member_dimension, member_dimension[client_id_name]),
			
			        -- Apply inactive relationship with date table
			        USERELATIONSHIP(date_table[date], customer_contact_info_marketing[date])
			    )
			
			RETURN
			IF(ISBLANK(a), 0, a)
			```
		formatString: #,0
		lineageTag: f8beaa9e-02ac-4a1a-b0a4-31a838836cd0

	measure 'unique members eligible for rally engage' = ```
			
			
			//  CALCULATE(DISTINCTCOUNT('member_dimension'[user_id]))
			 
			// VAR Selected_Date = CALCULATE(
			//     MAX('date_table'[date]),
			//     VALUES('date_table')
			// )
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// VAR SelectedDate =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             MAX(customer_contact_info_marketing[campaign_end_date]),
			//             FILTER(
			//                 customer_contact_info_marketing,
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//             )
			//         ),
			//         CALCULATE(
			//             MAX('date_table'[date]),
			//             VALUES('date_table')
			//         )
			//     )
			// VAR a = SELECTCOLUMNS(ADDCOLUMNS(
			//     SUMMARIZE(
			//         member_dimension,
			//         member_dimension[user_id],
			//         "Max_Start_Date",
			//         MAX(member_dimension[start_date])
			//     ),
			//     "Eligible_concat",
			//     member_dimension[user_id] & "-" & [Max_Start_Date]
			// ), [Eligible_concat])
			// VAR reduction =
			//     FILTER(
			//         member_dimension,
			//         member_dimension[Concated_fiels] IN a &&  
			//         member_dimension[start_date] <= SelectedDate  
			//     )
			// VAR Result =
			//     CALCULATE(
			//         DISTINCTCOUNT('member_dimension'[user_id]),
			//         member_dimension[start_date]<=SelectedDate,
			//         ALL(date_table[date])  
			//     )
			// RETURN
			// IF(ISBLANK(Result), 0, Result)
			 
			
			
			
			// unique_members_eligible_for_rally_engage =
			
			// VAR SelectedDate = CALCULATE(
			//     MAX('date_table'[date]), 
			//     VALUES('date_table')
			// ) -- Get the selected end date from the slicer
			
			// -- Create the 'a' variable (similar to previous measures)
			// VAR a = SELECTCOLUMNS(ADDCOLUMNS(
			//     SUMMARIZE(
			//         member_dimension,
			//         member_dimension[user_id],
			//         "Max_Start_Date",
			//         MAX(member_dimension[start_date])
			//     ),
			//     "Eligible_concat",
			//     member_dimension[user_id] & "-" & [Max_Start_Date]
			// ), [Eligible_concat])
			
			// -- The 'reduction' variable to filter based on the join date and concatenated fields
			// VAR reduction =
			//     FILTER(
			//         member_dimension,
			//         member_dimension[Concated_fiels] IN a &&  -- Filter based on the concatenated fields
			//         member_dimension[start_date] <= SelectedDate  -- Filter join date up to the selected date
			//     )
			
			// -- Calculating the distinct count of eligible users
			// VAR Result = 
			//     CALCULATE(
			//         DISTINCTCOUNT('member_dimension'[user_id]),
			//         member_dimension[start_date]<=SelectedDate, -- Apply the reduction filters
			//         ALL(date_table[date])  -- Ignore any pre-existing date filters
			//     )
			
			// -- Return the final result, returning 0 if no result is found
			// RETURN
			// IF(ISBLANK(Result), 0, Result)
			
			
			
			
			
			
			//  CALCULATE(DISTINCTCOUNT('member_dimension'[user_id]))
			
			// VAR SelectedDate = CALCULATE(
			//     MAX('date_table'[date]), 
			//     VALUES('date_table')
			// ) -- Get the selected end date from the slicer
			
			// -- Create the 'a' variable (similar to previous measures)
			// VAR a = SELECTCOLUMNS(ADDCOLUMNS(
			//     SUMMARIZE(
			//         member_dimension,
			//         member_dimension[user_id],
			//         "Max_Start_Date",
			//         MAX(member_dimension[start_date])
			//     ),
			//     "Eligible_concat",
			//     member_dimension[user_id] & "-" & [Max_Start_Date]
			// ), [Eligible_concat])
			
			// -- The 'reduction' variable to filter based on the join date and concatenated fields
			// VAR reduction =
			//     FILTER(
			//         member_dimension,
			//         member_dimension[Concated_fiels] IN a &&  -- Filter based on the concatenated fields
			//         member_dimension[start_date] <= SelectedDate  -- Filter join date up to the selected date
			//     )
			
			// -- Calculating the distinct count of eligible users
			// VAR Result = 
			//     CALCULATE(
			//         DISTINCTCOUNT('member_dimension'[user_id]),
			//         member_dimension[start_date]<=SelectedDate, -- Apply the reduction filters
			//         ALL(date_table[date])  -- Ignore any pre-existing date filters
			//     )
			
			// -- Return the final result, returning 0 if no result is found
			// RETURN
			// IF(ISBLANK(Result), 0, Result)
			
			//-------------
			// unique members eligible for rally engage = 
			// VAR SelectedDate = CALCULATE(
			//     MAX('date_table'[date]), 
			//     VALUES('date_table')
			// )
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// -- Create the 'a' variable
			// VAR a = SELECTCOLUMNS(
			//     ADDCOLUMNS(
			//         SUMMARIZE(
			//             member_dimension,
			//             member_dimension[user_id],
			//             "Max_Start_Date", MAX(member_dimension[start_date])
			//         ),
			//         "Eligible_concat", member_dimension[user_id] & "-" & [Max_Start_Date]
			//     ),
			//     [Eligible_concat]
			// )
			
			// -- The 'reduction' variable to filter based on the join date and concatenated fields
			// VAR reduction =
			//     FILTER(
			//         member_dimension,
			//         member_dimension[Concated_fiels] IN a &&
			//         member_dimension[start_date] <= SelectedDate
			//     )
			
			// -- Final result with conditional campaign filters
			// VAR Result = 
			//     CALCULATE(
			//         DISTINCTCOUNT(member_dimension[user_id]),
			//         reduction,
			//         -- Campaign filters applied only when SelectedCampaign is not blank
			//         IF(
			//             NOT ISBLANK(SelectedCampaign),
			//             customer_contact_info_marketing[campaign_name] = SelectedCampaign &&
			//             customer_contact_info_marketing[campaign_start_date] <= SelectedDate &&
			//             customer_contact_info_marketing[campaign_end_date] >= SelectedDate,
			//             TRUE()
			//         ),
			//         ALL(date_table[date])
			//     )
			
			// RETURN
			// IF(ISBLANK(Result), 0, Result)
			//-----------
			
			
			// unique members eligible for rally engage = 
			// unique members eligible for rally engage = 
			// unique members eligible for rally engage = 
			// VAR SelectedDate = CALCULATE(
			//     MAX('date_table'[date]), 
			//     VALUES('date_table')
			// )
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR a = 
			//     SELECTCOLUMNS(
			//         ADDCOLUMNS(
			//             SUMMARIZE(
			//                 member_dimension,
			//                 member_dimension[user_id],
			//                 "Max_Start_Date", MAX(member_dimension[start_date])
			//             ),
			//             "Eligible_concat", member_dimension[user_id] & "-" & [Max_Start_Date]
			//         ),
			//         [Eligible_concat]
			//     )
			
			// VAR reduction =
			//     FILTER(
			//         member_dimension,
			//         member_dimension[Concated_fiels] IN a &&
			//         member_dimension[start_date] <= SelectedDate
			//     )
			
			// -- Final result
			// VAR Result =
			//     CALCULATE(
			//         DISTINCTCOUNT(member_dimension[user_id]),
			//         reduction,
			//         // Conditional campaign filter
			//         FILTER(
			//             customer_contact_info_marketing,
			//             ISBLANK(SelectedCampaign) ||
			//             (
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign &&
			//                 customer_contact_info_marketing[campaign_start_date] <= SelectedDate &&
			//                 customer_contact_info_marketing[campaign_end_date] >= SelectedDate
			//             )
			//         ),
			//         ALL(date_table[date])
			//     )
			
			// RETURN
			// IF(ISBLANK(Result), 0, Result)
			// ________________________________________________________
			
			// VAR SelectedDate =
			
			//     CALCULATE(
			
			//         MAX('date_table'[date]),
			
			//         VALUES('date_table')
			
			//     )
			 
			// -- Step 1: Get selected campaign
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			 
			// -- Step 2: Extract relevant user IDs from the selected campaign
			
			// VAR CampaignFilteredUsers =
			
			//     SELECTCOLUMNS(
			
			//         FILTER(
			
			//             customer_contact_info_marketing,
			
			//             ISBLANK(SelectedCampaign)
			
			//             || (
			
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign &&
			
			//                 customer_contact_info_marketing[campaign_start_date] <= SelectedDate &&
			
			//                 customer_contact_info_marketing[campaign_end_date] >= SelectedDate
			
			//             )
			
			//         ),
			
			//         "user_id", customer_contact_info_marketing[user_id]
			
			//     )
			 
			// -- Step 3: Create the concatenated values for eligibility
			
			// VAR a =
			
			//     SELECTCOLUMNS(
			
			//         ADDCOLUMNS(
			
			//             SUMMARIZE(
			
			//                 member_dimension,
			
			//                 member_dimension[user_id],
			
			//                 "Max_Start_Date", MAX(member_dimension[start_date])
			
			//             ),
			
			//             "Eligible_concat", member_dimension[user_id] & "-" & [Max_Start_Date]
			
			//         ),
			
			//         [Eligible_concat]
			
			//     )
			 
			// -- Step 4: Filter reduction
			
			// VAR reduction =
			
			//     FILTER(
			
			//         member_dimension,
			
			//         member_dimension[Concated_fiels] IN a &&
			
			//         member_dimension[start_date] <= SelectedDate
			
			//     )
			 
			// -- Step 5: Calculate distinct eligible users using TREATAS
			
			// VAR Result =
			
			//     CALCULATE(
			
			//         DISTINCTCOUNT(member_dimension[user_id]),
			
			//         reduction,
			
			//         TREATAS(CampaignFilteredUsers, member_dimension[user_id]),
			
			//         ALL(date_table[date])
			
			//     )
			 
			// RETURN
			
			// IF(ISBLANK(Result), 0, Result)
			
			 VAR SelectedDate = CALCULATE(
			    MAX('date_table'[date]),
			    VALUES('date_table')
			) -- Get the selected end date from the slicer
			 
			-- Create the 'a' variable (similar to previous measures)
			VAR a = SELECTCOLUMNS(ADDCOLUMNS(
			    SUMMARIZE(
			        member_dimension,
			        member_dimension[user_id],
			        "Max_Start_Date",
			        MAX(member_dimension[start_date])
			    ),
			    "Eligible_concat",
			    member_dimension[user_id] & "-" & [Max_Start_Date]
			), [Eligible_concat])
			 
			-- The 'reduction' variable to filter based on the join date and concatenated fields
			VAR reduction =
			    FILTER(
			        member_dimension,
			        member_dimension[Concated_fiels] IN a &&  -- Filter based on the concatenated fields
			        member_dimension[start_date] <= SelectedDate  -- Filter join date up to the selected date
			    )
			 
			-- Calculating the distinct count of eligible users
			VAR Result =
			    CALCULATE(
			        DISTINCTCOUNT('member_dimension'[user_id]),
			        member_dimension[start_date]<=SelectedDate, -- Apply the reduction filters
			        ALL(date_table[date])  -- Ignore any pre-existing date filters
			    )
			 
			-- Return the final result, returning 0 if no result is found
			RETURN
			IF(ISBLANK(Result), 0, Result)
			
			 
			```
		formatString: #,0
		lineageTag: 1b271f08-9c20-4a5c-8620-c50b0202aa86

	measure 'unique gender by age' = ```
			
			// VAR min_date_ =
			//     CALCULATE(
			//         MIN('date_table'[date]),
			//         VALUES('date_table')
			//     )
			// VAR date_ =
			//     CALCULATE(
			//         MAX('date_table'[date]),
			//         VALUES('date_table')
			//     )
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			VAR min_date_ = 
			    IF(
			        NOT ISBLANK(SelectedCampaign),
			        CALCULATE(
			            MIN(customer_contact_info_marketing[campaign_start_date]),
			            FILTER(
			                customer_contact_info_marketing,
			                customer_contact_info_marketing[campaign_name] = SelectedCampaign
			            )
			        ),
			        CALCULATE(
			            MIN('date_table'[date]),
			            VALUES('date_table')
			        )
			    )
			
			VAR date_ = 
			    IF(
			        NOT ISBLANK(SelectedCampaign),
			        CALCULATE(
			            MAX(customer_contact_info_marketing[campaign_end_date]),
			            FILTER(
			                customer_contact_info_marketing,
			                customer_contact_info_marketing[campaign_name] = SelectedCampaign
			            )
			        ),
			        CALCULATE(
			            MAX('date_table'[date]),
			            VALUES('date_table')
			        )
			    )
			
			
			
			
			VAR new =
			    SELECTCOLUMNS(
			        ADDCOLUMNS(
			            SUMMARIZE(
			                FILTER(
			                    member_dimension,
			                    member_dimension[start_date] >= min_date_ &&
			                    member_dimension[start_date] <= date_
			                ),
			                member_dimension[user_id],
			                "Max_Start_Date", MAX(member_dimension[start_date])
			            ),
			            "Emp_concat", member_dimension[user_id] & "-" & [Max_Start_Date]
			        ),
			        [Emp_concat]
			    )
			    
			VAR reduction =
			    FILTER(
			        member_dimension,
			        (member_dimension[Concated_fiels] IN new)
			    )
			VAR count_user = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			VAR b = CALCULATE(
			    DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			    REMOVEFILTERS(member_dimension[gender]),REMOVEFILTERS(member_dimension[age range]),member_dimension[age range]<> "Unknown",member_dimension[age range]<> BLANK(),member_dimension[gender] <> BLANK())
			var d =
			DIVIDE(count_user, b)
			RETURN
			IF(ISBLANK(d),0,d)
			
			
			//VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR Min_Date_ = 
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             MIN(customer_contact_info_marketing[campaign_start_date]),
			//             FILTER(customer_contact_info_marketing, customer_contact_info_marketing[campaign_name] = SelectedCampaign)
			//         ),
			//         CALCULATE(MIN('date_table'[date]), VALUES('date_table'))
			//     )
			
			// VAR Max_Date_ = 
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             MAX(customer_contact_info_marketing[campaign_end_date]),
			//             FILTER(customer_contact_info_marketing, customer_contact_info_marketing[campaign_name] = SelectedCampaign)
			//         ),
			//         CALCULATE(MAX('date_table'[date]), VALUES('date_table'))
			//     )
			
			// -- Latest record per user within selected date range
			// VAR LatestRecords = 
			//     ADDCOLUMNS(
			//         SUMMARIZE(
			//             FILTER(
			//                 member_dimension,
			//                 member_dimension[start_date] >= Min_Date_ &&
			//                 member_dimension[start_date] <= Max_Date_
			//             ),
			//             member_dimension[user_id],
			//             "Max_Start_Date", MAX(member_dimension[start_date])
			//         ),
			//         "Emp_concat", [user_id] & "-" & [Max_Start_Date]
			//     )
			
			// -- Valid combinations
			// VAR EmpConcatList = SELECTCOLUMNS(LatestRecords, "Emp_concat", [Emp_concat])
			
			// -- Final Filtered Table
			// VAR ValidUserTable = 
			//     FILTER(
			//         member_dimension,
			//         member_dimension[Concated_fiels] IN EmpConcatList &&
			//         NOT ISBLANK(member_dimension[gender]) &&
			//         NOT ISBLANK(member_dimension[age range]) &&
			//         member_dimension[age range] <> "Unknown"
			//     )
			
			// RETURN
			// CALCULATE(
			//     DISTINCTCOUNT(member_dimension[user_id]),
			//     ValidUserTable
			// )
			
			```
		formatString: #,0%;-#,0%;#,0%
		lineageTag: 1d7ac24e-be0d-49c4-8a8b-9d70bbc983b3

	measure 'total users' = ```
			
			// VAR totalusers = CALCULATE(DISTINCTCOUNT('customer_contact_info_marketing'[user_id]), USERELATIONSHIP(date_table[date],customer_contact_info_marketing[date]),USERELATIONSHIP(customer_contact_info_marketing[user_id],member_last_activity_bi[user_id]))
			
			// var totalusers = CALCULATE(DISTINCTCOUNT(member_last_activity_bi[user_id]),USERELATIONSHIP(date_table[date],member_last_activity_bi[last_session_date]))
			// RETURN
			// IF(ISBLANK(totalusers), 0, totalusers)
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// -- Define campaign start date variable
			// VAR CampaignStartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// -- Define campaign end date variable
			// VAR CampaignEndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			-- Logic to calculate total users based on selected campaign or default date table relationship
			// VAR TotalUsers =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(member_last_activity_bi[user_id]),
			//             member_last_activity_bi[last_session_date] >= CampaignStartDate &&
			//             member_last_activity_bi[last_session_date] <= CampaignEndDate
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(member_last_activity_bi[user_id]),
			//             USERELATIONSHIP(date_table[date], member_last_activity_bi[last_session_date])
			//         )
			//     )
			
			// -- Return result with fallback to 0 if blank
			// RETURN
			// IF(ISBLANK(TotalUsers), 0, TotalUsers)
			
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Define campaign-filtered user list
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Count total users from member_last_activity_bi filtered by campaign and date relationship
			VAR totalusers =
			    CALCULATE(
			        DISTINCTCOUNT(member_last_activity_bi[user_id]),
			        USERELATIONSHIP(date_table[date], member_last_activity_bi[last_session_date]),
			        TREATAS(CampaignFilteredUsers, member_last_activity_bi[user_id])
			    )
			
			RETURN
			IF(ISBLANK(totalusers), 0, totalusers)
			
			```
		formatString: #,0
		lineageTag: f414d419-ea69-4bec-b428-f4c85ce5a8d6

	measure 'total earnings' =
			
			var a =CALCULATE(SUM('incentive_earning_detail'[amount_earned]),'incentive_earning_detail'[reward_category]<>"Bonus")
			RETURN
			IF(ISBLANK(a),0,a)
		formatString: 0
		lineageTag: 822b04ad-c903-4c94-9af2-d43dc3e3d7f1

	measure 'successful logins' = ```
			
			// VAR min_date_ =
			//     CALCULATE(
			//         MIN('date_table'[date]),
			//         VALUES('date_table')
			//     )
			// VAR max_date_ =
			//     CALCULATE(
			//         MAX('date_table'[date]),
			//         VALUES('date_table')
			//     )
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR min_date_ = 
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             MIN(customer_contact_info_marketing[campaign_start_date]),
			//             FILTER(
			//                 customer_contact_info_marketing,
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//             )
			//         ),
			//         CALCULATE(
			//             MIN('date_table'[date]),
			//             VALUES('date_table')
			//         )
			//     )
			
			// VAR max_date_ = 
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             MAX(customer_contact_info_marketing[campaign_end_date]),
			//             FILTER(
			//                 customer_contact_info_marketing,
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//             )
			//         ),
			//         CALCULATE(
			//             MAX('date_table'[date]),
			//             VALUES('date_table')
			//         )
			//     )
			
			
			// VAR b =
			//     SELECTCOLUMNS(
			//         ADDCOLUMNS(
			//             SUMMARIZE(
			//                 FILTER(
			//                     member_dimension,
			//                     member_dimension[start_date] >= min_date_ &&
			//                     member_dimension[start_date] <= max_date_
			//                 ),
			//                 member_dimension[user_id],
			//                 "Max_Start_Date", MAX(member_dimension[start_date])
			//             ),
			//             "Emp_concat", member_dimension[user_id] & "-" & [Max_Start_Date]
			//         ),
			//         [Emp_concat]
			//     )
			   
			// VAR reduction =
			//     FILTER(
			//         member_dimension,
			//         (member_dimension[Concated_fiels] IN b))
			// var a = CALCULATE(
			//         DISTINCTCOUNT('customer_contact_info_marketing'[user_id]),
			//         'member_dimension'[terms_and_conditions_acceptance_date]<= max_date_,'member_dimension'[terms_and_conditions_acceptance_date]<>BLANK(), USERELATIONSHIP(date_table[date],customer_contact_info_marketing[date]))
			    
			// RETURN
			// IF(ISBLANK(a),0,a)
			
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			VAR min_date_ =
			    CALCULATE(
			        MIN('date_table'[date]),
			        VALUES('date_table')
			    )
			
			VAR max_date_ =
			    CALCULATE(
			        MAX('date_table'[date]),
			        VALUES('date_table')
			    )
			
			-- Filter for member start dates within selected date range
			VAR b =
			    SELECTCOLUMNS(
			        ADDCOLUMNS(
			            SUMMARIZE(
			                FILTER(
			                    member_dimension,
			                    member_dimension[start_date] >= min_date_ &&
			                    member_dimension[start_date] <= max_date_
			                ),
			                member_dimension[user_id],
			                "Max_Start_Date", MAX(member_dimension[start_date])
			            ),
			            "Emp_concat", member_dimension[user_id] & "-" & [Max_Start_Date]
			        ),
			        [Emp_concat]
			    )
			
			-- Reduction filter using concatenated field
			VAR reduction =
			    FILTER(
			        member_dimension,
			        member_dimension[Concated_fiels] IN b
			    )
			
			-- Get campaign-filtered user list
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Final result filtered by campaign, T&C, and date relationship
			VAR a = 
			    CALCULATE(
			        DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			        USERELATIONSHIP(date_table[date], customer_contact_info_marketing[date]),
			        member_dimension[terms_and_conditions_acceptance_date] <= max_date_,
			        NOT ISBLANK(member_dimension[terms_and_conditions_acceptance_date]),
			        TREATAS(CampaignFilteredUsers, customer_contact_info_marketing[user_id])
			    )
			
			RETURN
			IF(ISBLANK(a), 0, a)
			
			```
		formatString: #,0
		lineageTag: 74e3231a-ea50-403f-8715-3c2825c5275b

	measure 'stride completed program' = ```
			
			//  var a = CALCULATE(DISTINCTCOUNT(incentive_earning_detail[user_id]), incentive_earning_detail[activity_type] = "rewardableStride",USERELATIONSHIP(date_table[date],incentive_earning_detail[fulfillment_date]))
			//  RETURN
			// IF(ISBLANK(a),0,a)
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR StartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR EndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR CompletedStride =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             incentive_earning_detail[activity_type] = "rewardableStride",
			//             incentive_earning_detail[fulfillment_date] >= StartDate &&
			//             incentive_earning_detail[fulfillment_date] <= EndDate,
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             incentive_earning_detail[activity_type] = "rewardableStride",
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         )
			//     )
			
			// RETURN
			// IF(ISBLANK(CompletedStride), 0, CompletedStride)
			
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Get filtered list of user_ids based on selected campaign
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Calculate distinct users who completed rewardableStride activity
			VAR a =
			    CALCULATE(
			        DISTINCTCOUNT(incentive_earning_detail[user_id]),
			        incentive_earning_detail[activity_type] = "rewardableStride",
			        USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date]),
			        TREATAS(CampaignFilteredUsers, incentive_earning_detail[user_id])
			    )
			
			RETURN
			IF(ISBLANK(a), 0, a)
			
			```
		formatString: #,0
		lineageTag: c8a194ec-5182-4955-8b72-bbe697f4492f

	measure Start_date = ```
			
			// var a = CALCULATE(MIN('date_table'[date]),VALUES('date_table'))
			// RETURN
			// "Start Date: " & FORMAT( a, "MM/DD/YYYY" ) 
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// VAR CampaignStartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]), USERELATIONSHIP(date_table[date], customer_contact_info_marketing[campaign_start_date]),
			//         FILTER(customer_contact_info_marketing,
			//             customer_contact_info_marketing[campaign_name] = SelectedCampaign  ) )
			// VAR DateFilterStart =
			//     CALCULATE(MIN('date_table'[date]),
			//         VALUES('date_table'))
			// VAR FinalStartDate = 
			//     IF( NOT ISBLANK(SelectedCampaign),
			//         CampaignStartDate,
			//         DateFilterStart)
			// RETURN
			// "Start Date: " & FORMAT(FinalStartDate, "MM/DD/YYYY")
			
			// ----------
			// VAR SelectedCampaigns = VALUES(customer_contact_info_marketing[campaign_name])
			// VAR HasCampaignSelection = NOT ISEMPTY(SelectedCampaigns)
			// -- Get MIN campaign start date when one or more campaigns are selected
			// VAR CampaignStartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         USERELATIONSHIP(date_table[date], customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] IN SelectedCampaigns )
			// -- Get MIN of filtered date_table (e.g., from slicer)
			// VAR DateFilterStart =
			//     CALCULATE(
			//         MIN('date_table'[date]),
			//         KEEPFILTERS(VALUES('date_table'[date]))  )
			// -- Get MIN from full date_table, removing filters from related tables
			// VAR FullDateTableStart =
			//     CALCULATE(
			//         MIN('date_table'[date]),
			//         REMOVEFILTERS(date_table),
			//         REMOVEFILTERS(customer_contact_info_marketing))
			// -- Priority: Campaign start > Date slicer > Full calendar date
			// VAR FinalStartDate = 
			//     IF(HasCampaignSelection,
			//         CampaignStartDate,
			//         IF(NOT ISBLANK(DateFilterStart),
			//             DateFilterStart,
			//             FullDateTableStart ) )
			// RETURN
			// "Start Date: " & FORMAT(FinalStartDate, "MM/DD/YYYY")
			
			// -----
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// VAR IsSingleCampaign = NOT ISBLANK(SelectedCampaign)
			// VAR HasFilteredCampaigns = ISFILTERED(customer_contact_info_marketing[campaign_name])
			// VAR SingleCampaignStartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]), 
			//         USERELATIONSHIP(date_table[date], customer_contact_info_marketing[campaign_start_date]),
			//         FILTER(customer_contact_info_marketing,
			//             customer_contact_info_marketing[campaign_name] = SelectedCampaign))
			
			// VAR MultipleSelectionMinDate = 
			//     CALCULATE(MIN(customer_contact_info_marketing[campaign_start_date]),
			//         USERELATIONSHIP(date_table[date], customer_contact_info_marketing[campaign_start_date]))
			
			// VAR DateFilterStart =
			//     CALCULATE(MIN('date_table'[date]),
			//         VALUES('date_table'))
			// VAR FinalStartDate = 
			//     IF(IsSingleCampaign,
			//         SingleCampaignStartDate,
			//         IF(HasFilteredCampaigns,
			//             MultipleSelectionMinDate,
			//             DateFilterStart))
			// RETURN
			// "Start Date: " & FORMAT(FinalStartDate, "MM/DD/YYYY")
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			VAR IsSingleCampaign = NOT ISBLANK(SelectedCampaign)
			VAR CampaignStartDate =
			    CALCULATE(
			        MIN(customer_contact_info_marketing[campaign_start_date]), 
			        USERELATIONSHIP(date_table[date], customer_contact_info_marketing[campaign_start_date]),
			        customer_contact_info_marketing[campaign_name] = SelectedCampaign
			    )
			VAR DateTableStartDate =
			    CALCULATE(
			        MIN('date_table'[date]),
			        VALUES('date_table')
			    )
			VAR FinalStartDate = 
			    IF(
			        IsSingleCampaign,
			        CampaignStartDate,
			        DateTableStartDate
			    )
			RETURN
			"Start Date: " & FORMAT(FinalStartDate, "MM/DD/YYYY")
			```
		lineageTag: bed833b6-5be7-4ea2-b85f-ce0eedbef91f

	measure 'sp successful' = ```
			
			// VAR min_date_ =
			//     CALCULATE(
			//         MIN('date_table'[date]),
			//         VALUES('date_table')
			//     )
			// VAR max_date_ =
			//     CALCULATE(
			//         MAX('date_table'[date]),
			//         VALUES('date_table')
			//     )
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR min_date_ = 
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             MIN(customer_contact_info_marketing[campaign_start_date]),
			//             FILTER(
			//                 customer_contact_info_marketing,
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//             )
			//         ),
			//         CALCULATE(
			//             MIN('date_table'[date]),
			//             VALUES('date_table')
			//         )
			//     )
			
			// VAR max_date_ = 
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             MAX(customer_contact_info_marketing[campaign_end_date]),
			//             FILTER(
			//                 customer_contact_info_marketing,
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//             )
			//         ),
			//         CALCULATE(
			//             MAX('date_table'[date]),
			//             VALUES('date_table')
			//         )
			//     )
			
			
			
			// VAR b =
			//     SELECTCOLUMNS(
			//         ADDCOLUMNS(
			//             SUMMARIZE(
			//                 FILTER(
			//                     member_dimension,
			//                     member_dimension[start_date] >= min_date_ &&
			//                     member_dimension[start_date] <= max_date_
			//                 ),
			//                 member_dimension[user_id],
			//                 "Max_Start_Date", MAX(member_dimension[start_date])
			//             ),
			//             "Emp_concat", member_dimension[user_id] & "-" & [Max_Start_Date]
			//         ),
			//         [Emp_concat]
			//     )
			   
			// VAR reduction =
			//     FILTER(
			//         member_dimension,
			//         (member_dimension[relationship_code] = "Spouse" || member_dimension[relationship_code] = "SP") && (member_dimension[Concated_fiels] IN b))
			 
			// var a = CALCULATE(DISTINCTCOUNT('customer_contact_info_marketing'[user_id]),member_dimension[relationship_code] = "Spouse",
			//         'member_dimension'[terms_and_conditions_acceptance_date]<= max_date_, 'member_dimension'[terms_and_conditions_acceptance_date]<>BLANK(), USERELATIONSHIP(date_table[date],customer_contact_info_marketing[date]))
			 
			// Return
			// IF(ISBLANK(a),0,a)
			
			
			// emp successful = 
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			VAR min_date_ =
			    CALCULATE(
			        MIN('date_table'[date]),
			        VALUES('date_table')
			    )
			
			VAR max_date_ =
			    CALCULATE(
			        MAX('date_table'[date]),
			        VALUES('date_table')
			    )
			
			-- Prepare filtered concatenated users
			VAR b =
			    SELECTCOLUMNS(
			        ADDCOLUMNS(
			            SUMMARIZE(
			                FILTER(
			                    member_dimension,
			                    member_dimension[start_date] >= min_date_ &&
			                    member_dimension[start_date] <= max_date_
			                ),
			                member_dimension[user_id],
			                "Max_Start_Date", MAX(member_dimension[start_date])
			            ),
			            "Emp_concat", member_dimension[user_id] & "-" & [Max_Start_Date]
			        ),
			        [Emp_concat]
			    )
			
			-- Reduce to only Employees with matched concat field
			VAR reduction =
			    FILTER(
			        member_dimension,
			        (member_dimension[relationship_code] = "Spouse" || member_dimension[relationship_code] = "SP") &&
			        member_dimension[Concated_fiels] IN b
			    )
			
			-- Get user list filtered by campaign
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Final measure
			VAR a = 
			    CALCULATE(
			        DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			        USERELATIONSHIP(date_table[date], customer_contact_info_marketing[date]),
			        member_dimension[relationship_code] = "Spouse",
			        member_dimension[terms_and_conditions_acceptance_date] <= max_date_,
			        NOT ISBLANK(member_dimension[terms_and_conditions_acceptance_date]),
			        TREATAS(CampaignFilteredUsers, customer_contact_info_marketing[user_id])
			    )
			
			RETURN
			IF(ISBLANK(a), 0, a)
			
			```
		formatString: #,0
		lineageTag: f9a433aa-59e5-4f5a-aa49-4c43da4b08d7

	measure 'sp active user' = ```
			
			// VAR min_date_ =
			//     CALCULATE(
			//         MIN('date_table'[date]),
			//         VALUES('date_table')
			//     )
			// VAR date_ =
			//     CALCULATE(
			//         MAX('date_table'[date]),
			//         VALUES('date_table')
			//     )
			    
			// VAR b =
			//     SELECTCOLUMNS(
			//         ADDCOLUMNS(
			//             SUMMARIZE(
			//                 FILTER(
			//                     member_dimension,
			//                     member_dimension[start_date] >= min_date_ &&
			//                     member_dimension[start_date] <= date_
			//                 ),
			//                 member_dimension[user_id],
			//                 "Max_Start_Date", MAX(member_dimension[start_date])
			//             ),
			//             "Emp_concat", member_dimension[user_id] & "-" & [Max_Start_Date]
			//         ),
			//         [Emp_concat]
			//     )
			    
			// VAR reduction =
			//     FILTER(
			//         member_dimension,
			//         (member_dimension[relationship_code] = "Spouse" ||
			//          member_dimension[relationship_code] = "SP")
			//          && (member_dimension[Concated_fiels] IN b)
			//     )
			
			// VAR Result = 
			// CALCULATE(DISTINCTCOUNT('member_last_activity_bi'[user_id]),Latest_Relationship_Per_User[RelationshipCode]= "Spouse")
			
			// -- Return the final result, returning 0 if no result is found
			// RETURN
			// IF(ISBLANK(Result), 0, Result)
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// VAR CampaignStartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         FILTER(customer_contact_info_marketing, customer_contact_info_marketing[campaign_name] = SelectedCampaign)
			//     )
			// VAR CampaignEndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         FILTER(customer_contact_info_marketing, customer_contact_info_marketing[campaign_name] = SelectedCampaign)
			//     )
			// VAR Result =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			//             FILTER(
			//                 'member_last_activity_bi',
			//                 'member_last_activity_bi'[last_session_date] >= CampaignStartDate &&
			//                 'member_last_activity_bi'[last_session_date] <= CampaignEndDate
			//             ),
			//             Latest_Relationship_Per_User[RelationshipCode] = "Spouse"
			//         ),
			//         -- fallback
			//         CALCULATE(
			//             DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			//             Latest_Relationship_Per_User[RelationshipCode] = "Spouse"
			//         )
			//     )
			// RETURN
			// IF(ISBLANK(Result), 0, Result)
			
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// -- Define campaign start date as a separate variable
			// VAR CampaignStartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// -- Define campaign end date as a separate variable
			// VAR CampaignEndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// -- Define the calculation for counting user IDs
			// VAR Result =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         -- If a campaign is selected, filter by campaign start and end dates
			//         CALCULATE(
			//             DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			//             'member_last_activity_bi'[last_session_date] >= CampaignStartDate &&
			//             'member_last_activity_bi'[last_session_date] <= CampaignEndDate,
			//             Latest_Relationship_Per_User[RelationshipCode] = "Spouse"
			//         ),
			//         -- Fallback: use the default calculation
			//         CALCULATE(
			//             DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			//             Latest_Relationship_Per_User[RelationshipCode] = "Spouse"
			//         )
			//     )
			
			// -- Return the result, ensuring it’s zero if no data exists
			// RETURN IF(ISBLANK(Result), 0, Result)
			
			
			
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR Result =
			//     CALCULATE(
			//         DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			//         Latest_Relationship_Per_User[RelationshipCode] = "Spouse",
			//         TREATAS(
			//             SELECTCOLUMNS(
			//                 FILTER(
			//                     customer_contact_info_marketing,
			//                     ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//                 ),
			//                 "user_id", customer_contact_info_marketing[user_id]
			//             ),
			//             'member_last_activity_bi'[user_id]
			//         )
			//     )
			
			// RETURN
			// IF(ISBLANK(Result), 0, Result)
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Filtered user IDs from campaign
			VAR CampaignUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            ALL(customer_contact_info_marketing),
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Filtered user IDs with Employee relationship
			VAR EmployeeUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            ALL(Latest_Relationship_Per_User),
			            Latest_Relationship_Per_User[RelationshipCode] = "Spouse"
			        ),
			        "user_id", Latest_Relationship_Per_User[user_id]
			    )
			
			-- Final calculation
			VAR ActiveUsers =
			    CALCULATE(
			        DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			
			        // Apply virtual filters using TREATAS
			        TREATAS(CampaignUsers, 'member_last_activity_bi'[user_id]),
			        TREATAS(EmployeeUsers, 'member_last_activity_bi'[user_id]),
			
			        // Preserve client-level context
			        ALLEXCEPT(member_dimension, member_dimension[client_id_name])
			    )
			
			RETURN
			IF(ISBLANK(ActiveUsers), 0, ActiveUsers)
			
			```
		formatString: #,0
		lineageTag: cddb053f-b254-4414-822a-157f974afff5

	measure 'redeeming points' = ```
			
			// var a = CALCULATE(DISTINCTCOUNT(gift_card_redemption[user_id]))
			// var a = CALCULATE(DISTINCTCOUNT(points_redemptions[user_id]),USERELATIONSHIP(date_table[date],points_redemptions[redemption_date]))
			// RETURN
			// IF(ISBLANK(a),0,a)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// VAR CampaignStart = CALCULATE(MIN(customer_contact_info_marketing[campaign_start_date]))
			// VAR CampaignEnd = CALCULATE(MAX(customer_contact_info_marketing[campaign_end_date]))
			
			// VAR Result =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(points_redemptions[user_id]),
			//             USERELATIONSHIP(date_table[date], points_redemptions[redemption_date]),
			//             points_redemptions[redemption_date] >= CampaignStart,
			//             points_redemptions[redemption_date] <= CampaignEnd
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(points_redemptions[user_id]),
			//             USERELATIONSHIP(date_table[date], points_redemptions[redemption_date])
			//         )
			//     )
			
			// RETURN IF(ISBLANK(Result), 0, Result)
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Step 1: Get list of user_ids for the selected campaign
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Step 2: Calculate distinct users from redemptions filtered by campaign and date
			VAR a =
			    CALCULATE(
			        DISTINCTCOUNT(points_redemptions[user_id]),
			        USERELATIONSHIP(date_table[date], points_redemptions[redemption_date]),
			        TREATAS(CampaignFilteredUsers, points_redemptions[user_id])
			    )
			
			RETURN
			IF(ISBLANK(a), 0, a)
			
			```
		formatString: #,0
		lineageTag: c4e532ef-36d2-4814-818b-007ccbf57146

	measure 'redeeming gift cards' = ```
			
			// var a =CALCULATE(DISTINCTCOUNT(gift_card_redemption[user_id]), USERELATIONSHIP(date_table[date], gift_card_redemption[reward_issue_date]))
			// RETURN
			// IF(ISBLANK(a),0,a)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// VAR CampaignStart = CALCULATE(MIN(customer_contact_info_marketing[campaign_start_date]))
			// VAR CampaignEnd = CALCULATE(MAX(customer_contact_info_marketing[campaign_end_date]))
			
			// VAR Result =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(gift_card_redemption[user_id]),
			//             USERELATIONSHIP(date_table[date], gift_card_redemption[reward_issue_date]),
			//             gift_card_redemption[reward_issue_date] >= CampaignStart &&
			//             gift_card_redemption[reward_issue_date] <= CampaignEnd
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(gift_card_redemption[user_id]),
			//             USERELATIONSHIP(date_table[date], gift_card_redemption[reward_issue_date])
			//         )
			//     )
			
			// RETURN IF(ISBLANK(Result), 0, Result)
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Filter user IDs from campaign table if a campaign is selected
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Calculate distinct count of redemptions for selected campaign users
			VAR a =
			    CALCULATE(
			        DISTINCTCOUNT(gift_card_redemption[user_id]),
			        USERELATIONSHIP(date_table[date], gift_card_redemption[reward_issue_date]),
			        TREATAS(CampaignFilteredUsers, gift_card_redemption[user_id])
			    )
			
			RETURN
			IF(ISBLANK(a), 0, a)
			
			```
		formatString: #,0
		lineageTag: 8e219c79-64cd-40f9-89f5-87713472e29d

	measure 'non active users' = ```
			
			// var total = 
			//     CALCULATE(DISTINCTCOUNT('customer_contact_info_marketing'[user_id]))
			
			// var active = 
			//     CALCULATE(DISTINCTCOUNT('member_last_activity_bi'[user_id]),USERELATIONSHIP(date_table[date], member_last_activity_bi[last_session_date]))
			
			// VAR nonactive = total - active
			
			// RETURN
			// nonactive
			// -------------------
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR CampaignStartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         FILTER(customer_contact_info_marketing, customer_contact_info_marketing[campaign_name] = SelectedCampaign)
			//     )
			
			// VAR CampaignEndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         FILTER(customer_contact_info_marketing, customer_contact_info_marketing[campaign_name] = SelectedCampaign)
			//     )
			
			// VAR Total = 
			//     CALCULATE(DISTINCTCOUNT('customer_contact_info_marketing'[user_id]))
			
			// VAR Active = 
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			//             FILTER(
			//                 'member_last_activity_bi',
			//                 'member_last_activity_bi'[last_session_date] >= CampaignStartDate &&
			//                 'member_last_activity_bi'[last_session_date] <= CampaignEndDate
			//             )
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			//             USERELATIONSHIP('date_table'[date], 'member_last_activity_bi'[last_session_date])
			//         )
			//     )
			// VAR NonActive = Total - Active
			
			// RETURN
			// IF(ISBLANK(NonActive), 0, NonActive)
			
			
			
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// -- Define the campaign start date
			// VAR CampaignStartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// -- Define the campaign end date
			// VAR CampaignEndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// -- Calculate the total distinct users in the customer contact info marketing table
			// VAR Total = 
			//     CALCULATE(DISTINCTCOUNT('customer_contact_info_marketing'[user_id]))
			
			// -- Calculate the active users based on campaign date range or fallback to date_table relationship
			// VAR Active = 
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         -- When a campaign is selected, calculate distinct active users within the campaign date range
			//         CALCULATE(
			//             DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			//             'member_last_activity_bi'[last_session_date] >= CampaignStartDate &&
			//             'member_last_activity_bi'[last_session_date] <= CampaignEndDate
			//         ),
			//         -- Fallback: when no campaign is selected, use the active relationship with the date table
			//         CALCULATE(
			//             DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			//             USERELATIONSHIP('date_table'[date], 'member_last_activity_bi'[last_session_date])
			//         )
			//     )
			
			-- Calculate the non-active users by subtracting active users from the total
			VAR NonActive = [unique members touched] - [active users]
			
			-- Return the result, ensuring non-active users are zero if the result is blank
			RETURN
			IF(ISBLANK(NonActive), 0, NonActive)
			
			
			// non active users = 
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// -- Total users from the marketing table, filtered by campaign
			// VAR total = 
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//         ALLEXCEPT(member_dimension,member_dimension[client_id_name]),
			//         FILTER(
			//             customer_contact_info_marketing,
			//             ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//         )
			//     )
			
			// -- Active users from last activity table, filtered via TREATAS
			// VAR active = 
			//     CALCULATE(
			//         DISTINCTCOUNT(member_last_activity_bi[user_id]),
			//         ALLEXCEPT(member_dimension,member_dimension[client_id_name]),
			//         USERELATIONSHIP(date_table[date], member_last_activity_bi[last_session_date]),
			//         TREATAS(
			//             SELECTCOLUMNS(
			//                 FILTER(
			//                     customer_contact_info_marketing,
			//                     ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//                 ),
			//                 "user_id", customer_contact_info_marketing[user_id]
			//             ),
			//             member_last_activity_bi[user_id]
			//         )
			//     )
			
			// -- Difference gives non-active users
			// VAR nonactive = total - active
			
			// RETURN
			// IF(ISBLANK(nonactive), 0, nonactive)
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// -- Step 1: Build a user_id table for selected campaign
			// VAR CampaignUsers =
			//     IF(
			//         ISBLANK(SelectedCampaign),
			//         CALCULATETABLE(
			//             VALUES(customer_contact_info_marketing[user_id])
			//         ),
			//         CALCULATETABLE(
			//             VALUES(customer_contact_info_marketing[user_id]),
			//             customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//         )
			//     )
			
			// -- Step 2: Total campaign users
			// VAR total =
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//         TREATAS(CampaignUsers, customer_contact_info_marketing[user_id]),
			//         ALLEXCEPT(member_dimension, member_dimension[client_id_name])
			//     )
			
			// -- Step 3: Active users with matching last session date and campaign membership
			// VAR active =
			//     CALCULATE(
			//         DISTINCTCOUNT(member_last_activity_bi[user_id]),
			//         TREATAS(CampaignUsers, member_last_activity_bi[user_id]),
			//         USERELATIONSHIP(date_table[date], member_last_activity_bi[last_session_date]),
			//         ALLEXCEPT(member_dimension, member_dimension[client_id_name])
			//     )
			
			// -- Step 4: Final non-active count
			// VAR nonactive = total - active
			
			// RETURN
			// nonactive
			
			
			```
		formatString: 0
		lineageTag: 82a24c2f-2b78-48c4-aad4-cc1eecbeb68d

	measure 'New EligibleUsers' = ```
			
			VAR SelectedDate = CALCULATE(
			    MAX('date_table'[date]), 
			    VALUES('date_table')
			) -- Get the selected end date from the slicer
			
			-- Create the 'a' variable (similar to previous measures)
			VAR a = SELECTCOLUMNS(ADDCOLUMNS(
			    SUMMARIZE(
			        member_dimension,
			        member_dimension[user_id],
			        "Max_Start_Date",
			        MAX(member_dimension[start_date])
			    ),
			    "Eligible_concat",
			    member_dimension[user_id] & "-" & [Max_Start_Date]
			), [Eligible_concat])
			
			-- The 'reduction' variable to filter based on the join date and concatenated fields
			VAR reduction =
			    FILTER(
			        member_dimension,
			        member_dimension[Concated_fiels] IN a &&  -- Filter based on the concatenated fields
			        member_dimension[start_date] <= SelectedDate  -- Filter join date up to the selected date
			    )
			
			-- Calculating the distinct count of eligible users
			VAR Result = 
			    CALCULATE(
			        DISTINCTCOUNT('member_dimension'[user_id])
			        // reduction,  -- Apply the reduction filters
			        // ALL(date_table[date])  -- Ignore any pre-existing date filters
			    )
			
			-- Return the final result, returning 0 if no result is found
			RETURN
			IF(ISBLANK(Result), 0, Result)
			
			```
		formatString: 0
		lineageTag: 651a28a6-4807-4eee-acb9-4bed4dbcca8c

	measure 'mission joins' = ```
			
			// var a = CALCULATE(DISTINCTCOUNT('mission_members_fact'[user_id]),USERELATIONSHIP(date_table[date],mission_members_fact[mission_start_date]))
			// RETURN
			// IF(ISBLANK(a),0,a)
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR StartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR EndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR Joined =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(mission_members_fact[user_id]),
			//             mission_members_fact[mission_start_date] >= StartDate,
			//             mission_members_fact[mission_start_date] <= EndDate,
			//             USERELATIONSHIP(date_table[date], mission_members_fact[mission_start_date])
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(mission_members_fact[user_id]),
			//             USERELATIONSHIP(date_table[date], mission_members_fact[mission_start_date])
			//         )
			//     )
			
			// RETURN
			// IF(ISBLANK(Joined), 0, Joined)
			
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Extract users based on selected campaign
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Mission joins filtered by campaign
			VAR a =
			    CALCULATE(
			        DISTINCTCOUNT(mission_members_fact[user_id]),
			        USERELATIONSHIP(date_table[date], mission_members_fact[mission_start_date]),
			        TREATAS(CampaignFilteredUsers, mission_members_fact[user_id])
			    )
			
			RETURN
			IF(ISBLANK(a), 0, a)
			
			```
		formatString: #,0
		lineageTag: 65ebf91f-2bff-4aa0-abe5-386e9ff75bc3

	measure 'mission completed' = ```
			
			// var a = CALCULATE(DISTINCTCOUNT(mission_members_fact[user_id]), USERELATIONSHIP(date_table[date],mission_members_fact[mission_completion_date]),mission_members_fact[mission_complete] = "1")
			// RETURN
			// IF(ISBLANK(a),0,a)
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR StartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR EndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR Completed =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(mission_members_fact[user_id]),
			//             mission_members_fact[mission_complete] = "1",
			//             mission_members_fact[mission_completion_date] >= StartDate,
			//             mission_members_fact[mission_completion_date] <= EndDate,
			//             USERELATIONSHIP(date_table[date], mission_members_fact[mission_completion_date])
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(mission_members_fact[user_id]),
			//             mission_members_fact[mission_complete] = "1",
			//             USERELATIONSHIP(date_table[date], mission_members_fact[mission_completion_date])
			//         )
			//     )
			
			// RETURN
			// IF(ISBLANK(Completed), 0, Completed)
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Get the list of user_ids relevant to the selected campaign
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Calculate mission completions for filtered users
			VAR a =
			    CALCULATE(
			        DISTINCTCOUNT(mission_members_fact[user_id]),
			        USERELATIONSHIP(date_table[date], mission_members_fact[mission_completion_date]),
			        mission_members_fact[mission_complete] = "1",
			        TREATAS(CampaignFilteredUsers, mission_members_fact[user_id])
			    )
			
			RETURN
			IF(ISBLANK(a), 0, a)
			
			```
		formatString: #,0
		lineageTag: 3f2c0eb3-9a96-4c0e-9da9-836a123ffc23

	measure 'member attestation completion' = ```
			
			// VAR a = CALCULATE(DISTINCTCOUNT(incentive_earning_detail[user_id]), incentive_earning_detail[activity_type] = "rewardableAttestationActivity",USERELATIONSHIP(date_table[date],incentive_earning_detail[fulfillment_date]))
			// RETURN
			// IF(ISBLANK(a), 0, a)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// VAR StartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			// VAR EndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			// VAR CompletionCount =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             incentive_earning_detail[activity_type] = "rewardableAttestationActivity",
			//             incentive_earning_detail[fulfillment_date] >= StartDate,
			//             incentive_earning_detail[fulfillment_date] <= EndDate,
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             incentive_earning_detail[activity_type] = "rewardableAttestationActivity",
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         )
			//     )
			// RETURN IF(ISBLANK(CompletionCount), 0, CompletionCount)
			
			
			
			
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Extract campaign-filtered user IDs
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Count distinct users who completed attestation activity
			VAR a =
			    CALCULATE(
			        DISTINCTCOUNT(incentive_earning_detail[user_id]),
			        incentive_earning_detail[activity_type] = "rewardableAttestationActivity",
			        USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date]),
			        TREATAS(CampaignFilteredUsers, incentive_earning_detail[user_id])
			    )
			
			RETURN
			IF(ISBLANK(a), 0, a)
			
			```
		formatString: #,0
		lineageTag: 6df2c246-6039-4881-9757-78551a3457fa

	measure 'maximum allowed' = ```
			
			// var a =CALCULATE(SUM('incentive_plan_config'[max_cap]), USERELATIONSHIP(date_table[date], incentive_plan_config[last_updated_date]),USERELATIONSHIP(member_dimension[client_name],'incentive_plan_config'[client_name]))
			// var b = CALCULATE(SUM(incentive_earning_detail[MaxCap]),USERELATIONSHIP(date_table[date],incentive_earning_detail[fulfillment_date]))
			// RETURN
			// IF(ISBLANK(b),0,b)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// VAR StartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			// VAR EndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			// VAR MaxCap =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             SUM(incentive_earning_detail[MaxCap]),
			//             incentive_earning_detail[fulfillment_date] >= StartDate,
			//             incentive_earning_detail[fulfillment_date] <= EndDate,
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         ),
			//         CALCULATE(
			//             SUM(incentive_earning_detail[MaxCap]),
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         )
			//     )
			// RETURN IF(ISBLANK(MaxCap), 0, MaxCap)
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Get relevant user_ids based on campaign filter
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Sum max_cap from incentive plan config
			VAR a =
			    CALCULATE(
			        SUM('incentive_plan_config'[max_cap]),
			        USERELATIONSHIP(date_table[date], incentive_plan_config[last_updated_date]),
			        USERELATIONSHIP(member_dimension[client_name], incentive_plan_config[client_name])
			    )
			
			-- Sum MaxCap from incentive earning detail only for users in the selected campaign
			VAR b =
			    CALCULATE(
			        SUM(incentive_earning_detail[MaxCap]),
			        USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date]),
			        TREATAS(CampaignFilteredUsers, incentive_earning_detail[user_id])
			    )
			
			RETURN
			IF(ISBLANK(b), 0, b)
			
			```
		formatString: #,0
		lineageTag: 9573bedc-1a9e-41ad-b7ae-df45e2b09bf8

	measure 'incentives earned' = ```
			
			// var a =CALCULATE(SUM('incentive_earning_detail'[amount_earned]),USERELATIONSHIP(date_table[date],incentive_earning_detail[fulfillment_date]),incentive_earning_detail[reward_category]="Core")
			// RETURN
			// IF(ISBLANK(a),0,a)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// VAR StartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			// VAR EndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			// VAR Earned =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             SUM(incentive_earning_detail[amount_earned]),
			//             incentive_earning_detail[reward_category] = "Core",
			//             incentive_earning_detail[fulfillment_date] >= StartDate,
			//             incentive_earning_detail[fulfillment_date] <= EndDate,
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         ),
			//         CALCULATE(
			//             SUM(incentive_earning_detail[amount_earned]),
			//             incentive_earning_detail[reward_category] = "Core",
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         )
			//     )
			// RETURN IF(ISBLANK(Earned), 0, Earned)
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Extract user_ids for selected campaign
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Calculate incentive amount for matched users and date
			VAR a =
			    CALCULATE(
			        SUM('incentive_earning_detail'[amount_earned]),
			        USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date]),
			        TREATAS(CampaignFilteredUsers, incentive_earning_detail[user_id]),
			        'incentive_earning_detail'[reward_category] = "Core"
			    )
			
			RETURN
			IF(ISBLANK(a), 0, a)
			
			```
		formatString: #,0
		lineageTag: 2c3de607-6ddd-4ffa-9c6c-3a7033b847de

	measure 'health survey completions' = ```
			
			// VAR a = CALCULATE(DISTINCTCOUNT(incentive_earning_detail[user_id]), incentive_earning_detail[activity_type] = "rewardableHealthSurvey",USERELATIONSHIP(date_table[date],incentive_earning_detail[fulfillment_date]))
			// RETURN
			// IF(ISBLANK(a), 0, a)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// VAR StartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			// VAR EndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			// VAR CompletionCount =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             incentive_earning_detail[activity_type] = "rewardableHealthSurvey",
			//             incentive_earning_detail[fulfillment_date] >= StartDate,
			//             incentive_earning_detail[fulfillment_date] <= EndDate,
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             incentive_earning_detail[activity_type] = "rewardableHealthSurvey",
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         )
			//     )
			// RETURN IF(ISBLANK(CompletionCount), 0, CompletionCount)
			
			
			
			
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Get campaign-filtered user IDs
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Calculate completions of rewardableHealthSurvey
			VAR a =
			    CALCULATE(
			        DISTINCTCOUNT(incentive_earning_detail[user_id]),
			        incentive_earning_detail[activity_type] = "rewardableHealthSurvey",
			        USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date]),
			        TREATAS(CampaignFilteredUsers, incentive_earning_detail[user_id])
			    )
			
			RETURN
			IF(ISBLANK(a), 0, a)
			
			```
		formatString: #,0
		lineageTag: ec2b67b3-d54a-4c91-86a2-542ef87abf3a

	measure 'gymcheckin completed program' = ```
			
			//  var a = CALCULATE(DISTINCTCOUNT(incentive_earning_detail[user_id]), incentive_earning_detail[activity_type] = "rewardableGymCheckin",USERELATIONSHIP(date_table[date],incentive_earning_detail[fulfillment_date]))
			//  RETURN
			// IF(ISBLANK(a),0,a)
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR StartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR EndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR Checkins =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             incentive_earning_detail[activity_type] = "rewardableGymCheckin",
			//             incentive_earning_detail[fulfillment_date] >= StartDate &&
			//             incentive_earning_detail[fulfillment_date] <= EndDate,
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             incentive_earning_detail[activity_type] = "rewardableGymCheckin",
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         )
			//     )
			
			// RETURN
			// IF(ISBLANK(Checkins), 0, Checkins)
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Get filtered user_id list based on selected campaign
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Calculate gym check-in completions
			VAR a =
			    CALCULATE(
			        DISTINCTCOUNT(incentive_earning_detail[user_id]),
			        incentive_earning_detail[activity_type] = "rewardableGymCheckin",
			        USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date]),
			        TREATAS(CampaignFilteredUsers, incentive_earning_detail[user_id])
			    )
			
			RETURN
			IF(ISBLANK(a), 0, a)
			
			```
		formatString: #,0
		lineageTag: db3eee15-65d4-4e9b-8b00-fdf06fdbfa15

	measure gauge = ```
			[A] * [B]
			
			```
		lineageTag: a2121188-bf61-4a53-9d8f-e1da44875818

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure End_date = ```
			
			// var a = CALCULATE(MAX('date_table'[date]),VALUES('date_table'))
			// RETURN
			// "End Date: " & FORMAT( a, "MM/DD/YYYY" ) 
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// VAR CampaignEndDate = CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         // USERELATIONSHIP(date_table[date], customer_contact_info_marketing[campaign_end_date]),
			//         FILTER(customer_contact_info_marketing,
			//             customer_contact_info_marketing[campaign_name] = SelectedCampaign ) )
			// VAR DateFilterEnd =
			//     CALCULATE(MAX('date_table'[date]), VALUES('date_table'))
			// VAR FinalEndDate = 
			//     IF( NOT ISBLANK(SelectedCampaign),
			//         CampaignEndDate,
			//         DateFilterEnd)
			// RETURN
			// "End Date: " & FORMAT(FinalEndDate, "MM/DD/YYYY")
			 
			// ----------
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// VAR IsSingleCampaign = NOT ISBLANK(SelectedCampaign)
			// VAR HasFilteredCampaigns = ISFILTERED(customer_contact_info_marketing[campaign_name])
			// VAR SingleCampaignEndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         FILTER(
			//             customer_contact_info_marketing,
			//             customer_contact_info_marketing[campaign_name] = SelectedCampaign  ) )
			// VAR MultipleSelectionMaxDate = 
			//     CALCULATE( MAX(customer_contact_info_marketing[campaign_end_date]))
			// VAR DateFilterEnd =
			//     CALCULATE(MAX('date_table'[date]), VALUES('date_table'))
			// VAR FinalEndDate = 
			//     IF(IsSingleCampaign,
			//         SingleCampaignEndDate,
			//         IF(HasFilteredCampaigns,
			//             MultipleSelectionMaxDate,
			//             DateFilterEnd))
			// RETURN
			// "End Date: " & FORMAT(FinalEndDate, "MM/DD/YYYY")
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			VAR IsSingleCampaign = NOT ISBLANK(SelectedCampaign)
			VAR CampaignEndDate =
			    CALCULATE(
			        MAX(customer_contact_info_marketing[campaign_end_date]),
			        customer_contact_info_marketing[campaign_name] = SelectedCampaign
			    )
			VAR DateTableEndDate =
			    CALCULATE(
			        MAX('date_table'[date]),
			        VALUES('date_table')
			    )
			VAR FinalEndDate = 
			    IF(
			        IsSingleCampaign,
			        CampaignEndDate,
			        DateTableEndDate
			    )
			RETURN
			"End Date: " & FORMAT(FinalEndDate, "MM/DD/YYYY")
			```
		lineageTag: df85775d-c917-4024-8cba-e81d80ace703

	measure 'emp successful' = ```
			
			// VAR min_date_ =
			//     CALCULATE(
			//         MIN('date_table'[date]),
			//         VALUES('date_table')
			//     )
			// VAR max_date_ =
			//     CALCULATE(
			//         MAX('date_table'[date]),
			//         VALUES('date_table')
			//     )
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR min_date_ = 
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             MIN(customer_contact_info_marketing[campaign_start_date]),
			//             FILTER(
			//                 customer_contact_info_marketing,
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//             )
			//         ),
			//         CALCULATE(
			//             MIN('date_table'[date]),
			//             VALUES('date_table')
			//         )
			//     )
			
			// VAR max_date_ = 
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             MAX(customer_contact_info_marketing[campaign_end_date]),
			//             FILTER(
			//                 customer_contact_info_marketing,
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//             )
			//         ),
			//         CALCULATE(
			//             MAX('date_table'[date]),
			//             VALUES('date_table')
			//         )
			//     )
			
			
			
			// VAR b =
			//     SELECTCOLUMNS(
			//         ADDCOLUMNS(
			//             SUMMARIZE(
			//                 FILTER(
			//                     member_dimension,
			//                     member_dimension[start_date] >= min_date_ &&
			//                     member_dimension[start_date] <= max_date_
			//                 ),
			//                 member_dimension[user_id],
			//                 "Max_Start_Date", MAX(member_dimension[start_date])
			//             ),
			//             "Emp_concat", member_dimension[user_id] & "-" & [Max_Start_Date]
			//         ),
			//         [Emp_concat]
			//     )
			   
			// VAR reduction =
			//     FILTER(
			//         member_dimension,
			//         (member_dimension[relationship_code] = "Employee" || member_dimension[relationship_code] = "EE") && (member_dimension[Concated_fiels] IN b))
			 
			// var a =   CALCULATE(DISTINCTCOUNT('customer_contact_info_marketing'[user_id]),member_dimension[relationship_code] = "Employee",
			//         'member_dimension'[terms_and_conditions_acceptance_date]<= max_date_, 'member_dimension'[terms_and_conditions_acceptance_date]<>BLANK(),USERELATIONSHIP(date_table[date],customer_contact_info_marketing[date]))
			 
			// Return
			// if(ISBLANK(a),0,a)
			
			// emp successful = 
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			VAR min_date_ =
			    CALCULATE(
			        MIN('date_table'[date]),
			        VALUES('date_table')
			    )
			
			VAR max_date_ =
			    CALCULATE(
			        MAX('date_table'[date]),
			        VALUES('date_table')
			    )
			
			-- Prepare filtered concatenated users
			VAR b =
			    SELECTCOLUMNS(
			        ADDCOLUMNS(
			            SUMMARIZE(
			                FILTER(
			                    member_dimension,
			                    member_dimension[start_date] >= min_date_ &&
			                    member_dimension[start_date] <= max_date_
			                ),
			                member_dimension[user_id],
			                "Max_Start_Date", MAX(member_dimension[start_date])
			            ),
			            "Emp_concat", member_dimension[user_id] & "-" & [Max_Start_Date]
			        ),
			        [Emp_concat]
			    )
			
			-- Reduce to only Employees with matched concat field
			VAR reduction =
			    FILTER(
			        member_dimension,
			        (member_dimension[relationship_code] = "Employee" || member_dimension[relationship_code] = "EE") &&
			        member_dimension[Concated_fiels] IN b
			    )
			
			-- Get user list filtered by campaign
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Final measure
			VAR a = 
			    CALCULATE(
			        DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			        USERELATIONSHIP(date_table[date], customer_contact_info_marketing[date]),
			        member_dimension[relationship_code] = "Employee",
			        member_dimension[terms_and_conditions_acceptance_date] <= max_date_,
			        NOT ISBLANK(member_dimension[terms_and_conditions_acceptance_date]),
			        TREATAS(CampaignFilteredUsers, customer_contact_info_marketing[user_id])
			    )
			
			RETURN
			IF(ISBLANK(a), 0, a)
			
			```
		formatString: #,0
		lineageTag: 8c51676e-bfa7-43a2-b9e1-79111459d7ad

	measure 'emp provided reward points' = ```
			
			// var a = CALCULATE(DISTINCTCOUNT(incentive_earning_detail[user_id]), incentive_earning_detail[currency] = "EMPLOYER_POINTS", USERELATIONSHIP(date_table[date],incentive_earning_detail[fulfillment_date]))
			// RETURN
			// IF(ISBLANK(a),0,a)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// VAR CampaignStart = CALCULATE(MIN(customer_contact_info_marketing[campaign_start_date]))
			// VAR CampaignEnd = CALCULATE(MAX(customer_contact_info_marketing[campaign_end_date]))
			
			// VAR Result =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             incentive_earning_detail[currency] = "EMPLOYER_POINTS",
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date]),
			//             incentive_earning_detail[fulfillment_date] >= CampaignStart,
			//             incentive_earning_detail[fulfillment_date] <= CampaignEnd
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             incentive_earning_detail[currency] = "EMPLOYER_POINTS",
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         )
			//     )
			
			// RETURN IF(ISBLANK(Result), 0, Result)
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Step 1: Get relevant user_ids for selected campaign
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Step 2: Calculate distinct user count for EMPLOYER_POINTS
			VAR a =
			    CALCULATE(
			        DISTINCTCOUNT(incentive_earning_detail[user_id]),
			        incentive_earning_detail[currency] = "EMPLOYER_POINTS",
			        USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date]),
			        TREATAS(CampaignFilteredUsers, incentive_earning_detail[user_id])
			    )
			
			-- Step 3: Return result
			RETURN
			IF(ISBLANK(a), 0, a)
			
			```
		formatString: #,0
		lineageTag: e35a198a-bece-43e6-bfcd-edd46e92b7f3

	measure 'emp active user' = ```
			
			// VAR min_date_ =
			//     CALCULATE(
			//         MIN('date_table'[date]),
			//         VALUES('date_table')
			//     )
			// VAR date_ =
			//     CALCULATE(
			//         MAX('date_table'[date]),
			//         VALUES('date_table')
			//     )
			    
			// VAR b =
			//     SELECTCOLUMNS(
			//         ADDCOLUMNS(
			//             SUMMARIZE(
			//                 FILTER(
			//                     member_dimension,
			//                     member_dimension[start_date] >= min_date_ &&
			//                     member_dimension[start_date] <= date_
			//                 ),
			//                 member_dimension[user_id],
			//                 "Max_Start_Date", MAX(member_dimension[start_date])
			//             ),
			//             "Emp_concat", member_dimension[user_id] & "-" & [Max_Start_Date]
			//         ),
			//         [Emp_concat]
			//     )
			    
			// VAR reduction =
			//     FILTER(
			//         member_dimension,
			//         (member_dimension[relationship_code] = "Employee" ||
			//          member_dimension[relationship_code] = "EE")
			//          && (member_dimension[Concated_fiels] IN b)
			//     )
			
			
			// VAR Result =
			//     CALCULATE(
			//         DISTINCTCOUNT('member_last_activity_bi'[user_id]),Latest_Relationship_Per_User[RelationshipCode]= "Employee")
			
			// -- Step 4: Return the result, ensuring 0 is returned if the result is blank
			// RETURN
			// IF(ISBLANK(Result), 0, Result)
			
			
			// -------------
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR CampaignStartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR CampaignEndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR Result =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			//             'member_last_activity_bi'[last_session_date] >= CampaignStartDate &&
			//             'member_last_activity_bi'[last_session_date] <= CampaignEndDate,
			//             Latest_Relationship_Per_User[RelationshipCode] = "Employee"
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			//             Latest_Relationship_Per_User[RelationshipCode] = "Employee"
			//         )
			//     )
			
			// RETURN IF(ISBLANK(Result), 0, Result)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR Result =
			//     CALCULATE(
			//         DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			//         Latest_Relationship_Per_User[RelationshipCode] = "Employee",
			//         TREATAS(
			//             SELECTCOLUMNS(
			//                 FILTER(
			//                     customer_contact_info_marketing,
			//                     ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//                 ),
			//                 "user_id", customer_contact_info_marketing[user_id]
			//             ),
			//             'member_last_activity_bi'[user_id]
			//         )
			//     )
			
			// RETURN
			// IF(ISBLANK(Result), 0, Result)
			
			
			
			// -- Filtered user IDs with Employee relationship
			// VAR EmployeeUsers =
			//     SELECTCOLUMNS(
			//         FILTER(
			//             ALL(Latest_Relationship_Per_User),
			//             Latest_Relationship_Per_User[RelationshipCode] = "Employee"
			//         ),
			//         "user_id", Latest_Relationship_Per_User[user_id]
			//     )
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Get users for selected campaign (or all if none selected)
			VAR CampaignUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            ALL(customer_contact_info_marketing),
			            ISBLANK(SelectedCampaign) ||
			            customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Get all Employee user IDs
			VAR EmployeeUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            ALL(Latest_Relationship_Per_User),
			            Latest_Relationship_Per_User[RelationshipCode] = "Employee"
			        ),
			        "user_id", Latest_Relationship_Per_User[user_id]
			    )
			
			-- Find intersection of Campaign AND Employee users
			VAR ValidUserIDs =
			    INTERSECT(CampaignUsers, EmployeeUsers)
			
			-- Final count
			VAR ActiveUsers =
			    CALCULATE(
			        DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			        TREATAS(ValidUserIDs, 'member_last_activity_bi'[user_id]),
			        ALLEXCEPT(member_dimension, member_dimension[client_id_name])
			    )
			
			RETURN
			IF(ISBLANK(ActiveUsers), 0, ActiveUsers)
			
			```
		formatString: #,0
		lineageTag: 5ba72428-a026-448c-8cac-ec9626f47b1d

	measure 'email volume trends' =
			
			CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]),ALLEXCEPT(member_dimension,member_dimension[client_id_name]))
		formatString: #,0
		lineageTag: a9ea8eff-4d8b-4505-8c59-179e1308c6b0

	measure 'email sent' = ```
			
			// var a = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]), 
			// customer_contact_info_marketing[campaign_legend_lebel] = "Delivered" ||
			// customer_contact_info_marketing[campaign_legend_lebel] = "Marked Unsubscribe") 
			// RETURN
			// IF(ISBLANK(a),0,a)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR Result =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//             customer_contact_info_marketing[campaign_legend_lebel] IN { "Delivered", "Marked Unsubscribe" },
			//             customer_contact_info_marketing[channel] <> "DM",
			//             FILTER(
			//                 customer_contact_info_marketing,
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign &&
			//                 customer_contact_info_marketing[campaign_start_date] <= MAX('date_table'[date]) &&
			//                 customer_contact_info_marketing[campaign_end_date] >= MIN('date_table'[date])
			//             )
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//             customer_contact_info_marketing[channel] <> "DM",
			//             customer_contact_info_marketing[campaign_legend_lebel] IN { "Delivered", "Marked Unsubscribe" }
			//         )
			//     )
			
			// RETURN
			// IF(ISBLANK(Result), 0, Result)
			
			
			// var a = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]), 
			// customer_contact_info_marketing[channel] <> "DM",
			// customer_contact_info_marketing[campaign_legend_lebel] = "Delivered" ||
			// customer_contact_info_marketing[campaign_legend_lebel] = "Marked Unsubscribe") 
			// RETURN
			// IF(ISBLANK(a),0,a)
			
			
			
			// unique members touched = 
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR Result = 
			// CALCULATE(
			//     DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//     FILTER(
			//         customer_contact_info_marketing,
			//         customer_contact_info_marketing[channel] <> "DM" &&
			//         (  customer_contact_info_marketing[campaign_legend_lebel] = "Delivered" ||
			//             customer_contact_info_marketing[campaign_legend_lebel] = "Marked Unsubscribe" ||
			//             customer_contact_info_marketing[campaign_legend_lebel] = "Sent" ||
			//             customer_contact_info_marketing[campaign_legend_lebel] = "Opened" ||
			//             customer_contact_info_marketing[campaign_legend_lebel] = "Clicked"
			//         ) &&
			//         (
			//             ISBLANK(SelectedCampaign) ||
			//             customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//         )
			//     )
			// )
			
			// RETURN
			// IF(ISBLANK(Result), 0, Result)
			
			
			
			
			
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			VAR Result=
			    CALCULATE(
			        DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			
			        -- Apply campaign filters using direct filters (not FILTER function)
			        customer_contact_info_marketing[channel] <> "DM",
			        customer_contact_info_marketing[campaign_legend_lebel] IN {
			            "Delivered", "Marked Unsubscribe", "Sent", "Opened", "Clicked"
			        },
			        // Campaign filter only if selected
			        IF(
			            ISBLANK(SelectedCampaign),
			            TRUE(),
			            customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			
			        -- Retain client-level granularity
			        ALLEXCEPT(member_dimension, member_dimension[client_id_name]),
			
			        -- Activate inactive relationship for date filtering
			        USERELATIONSHIP(date_table[date], customer_contact_info_marketing[date])
			    )
			
			RETURN
			IF(ISBLANK(Result), 0, Result)
			
			```
		formatString: #,0
		lineageTag: 150d2e9a-6bec-48d2-8751-e53835a4fcc4

	measure 'email opened' = ```
			
			// var a = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]), customer_contact_info_marketing[channel] <> "DM",customer_contact_info_marketing[campaign_legend_lebel] = "Opened" || customer_contact_info_marketing[campaign_legend_lebel] = "Clicked" )
			// RETURN
			// IF(ISBLANK(a), 0, a)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR a =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//             customer_contact_info_marketing[campaign_legend_lebel] IN { "Opened", "Clicked" },
			//             FILTER(
			//                 customer_contact_info_marketing,
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign &&
			//                 customer_contact_info_marketing[campaign_start_date] <= MAX('date_table'[date]) &&
			//                 customer_contact_info_marketing[campaign_end_date] >= MIN('date_table'[date])
			//             )
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//             customer_contact_info_marketing[campaign_legend_lebel] IN { "Opened", "Clicked" }
			//         )
			//     )
			
			// RETURN
			// IF(ISBLANK(a), 0, a)
			
			
			
			
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR a =
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//         FILTER(
			//             customer_contact_info_marketing,
			//             customer_contact_info_marketing[channel] <> "DM" &&
			//             (
			//                 customer_contact_info_marketing[campaign_legend_lebel] = "Opened" ||
			//                 customer_contact_info_marketing[campaign_legend_lebel] = "Clicked"
			//             ) &&
			//             (
			//                 ISBLANK(SelectedCampaign) ||
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//             )
			//         )
			//     )
			
			// RETURN
			// IF(ISBLANK(a), 0, a)
			
			
			
			
			
			
			
			
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			VAR a =
			    CALCULATE(
			        DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			
			        -- Apply necessary filters directly
			        customer_contact_info_marketing[channel] <> "DM",
			        customer_contact_info_marketing[campaign_legend_lebel] IN { "Opened", "Clicked", "Marked Unsubscribe" },
			        IF(
			            ISBLANK(SelectedCampaign),
			            TRUE(),
			            customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			
			        -- Maintain client-level grouping context
			        ALLEXCEPT(member_dimension, member_dimension[client_id_name]),
			
			        -- Activate inactive relationship with date table
			        USERELATIONSHIP(date_table[date], customer_contact_info_marketing[date])
			    )
			
			RETURN
			IF(ISBLANK(a), 0, a)
			
			```
		formatString: #,0
		lineageTag: 3f60da3e-e7ad-4260-9b80-9dd30ebe2089

	measure 'email delivered' = ```
			
			// var a =CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//  customer_contact_info_marketing[channel] <> "DM",
			//  customer_contact_info_marketing[campaign_legend_lebel] = "Delivered")
			// RETURN
			// IF(ISBLANK(a),0,a)
			
			// unique members touched delivered = 
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR a =
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//         FILTER(
			//             customer_contact_info_marketing,
			//             customer_contact_info_marketing[channel] <> "DM" &&
			//             customer_contact_info_marketing[campaign_legend_lebel] = "Delivered" || 
			//             customer_contact_info_marketing[campaign_legend_lebel] = "Marked Unsubscribe" ||
			//             customer_contact_info_marketing[campaign_legend_lebel] = "Opened" ||
			//             customer_contact_info_marketing[campaign_legend_lebel] = "Clicked"
			//              &&
			//             (
			//                 ISBLANK(SelectedCampaign) ||
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//             )
			//         )
			//     )
			
			// RETURN
			// IF(ISBLANK(a), 0, a)
			
			
			
			
			
			
			
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			VAR a =
			    CALCULATE(
			        DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			
			        -- Apply filters directly
			        customer_contact_info_marketing[channel] <> "DM",
			        customer_contact_info_marketing[campaign_legend_lebel] IN {
			            "Delivered", "Marked Unsubscribe", "Opened", "Clicked"
			        },
			        IF(
			            ISBLANK(SelectedCampaign),
			            TRUE(),
			            customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			
			        -- Retain client-level granularity
			        ALLEXCEPT(member_dimension, member_dimension[client_id_name]),
			
			        -- Activate inactive date relationship
			        USERELATIONSHIP(date_table[date], customer_contact_info_marketing[date])
			    )
			
			RETURN
			IF(ISBLANK(a), 0, a)
			
			```
		formatString: #,0
		lineageTag: a600fa10-cff2-4bfb-977f-8b6d7764441a

	measure 'email click' = ```
			
			// var a = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]), customer_contact_info_marketing[channel] <> "DM",customer_contact_info_marketing[campaign_legend_lebel] = "Clicked")
			// RETURN
			// IF(ISBLANK(a), 0, a)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// VAR a =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//             customer_contact_info_marketing[campaign_legend_lebel] = "Clicked",
			//             FILTER(
			//                 customer_contact_info_marketing,
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign &&
			//                 customer_contact_info_marketing[campaign_start_date] <= MAX('date_table'[date]) &&
			//                 customer_contact_info_marketing[campaign_end_date] >= MIN('date_table'[date])
			//             )
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//             customer_contact_info_marketing[campaign_legend_lebel] = "Clicked"
			//         )
			//     )
			
			// RETURN
			// IF(ISBLANK(a), 0, a)
			
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR a =
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//         FILTER(
			//             customer_contact_info_marketing,
			//             customer_contact_info_marketing[channel] <> "DM" &&
			//             customer_contact_info_marketing[campaign_legend_lebel] = "Clicked" &&
			//             (
			//                 ISBLANK(SelectedCampaign) ||
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//             )
			//         )
			//     )
			
			// RETURN
			// IF(ISBLANK(a), 0, a)
			
			
			
			
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			VAR a =
			    CALCULATE(
			        DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			
			        -- Apply filters directly
			        customer_contact_info_marketing[channel] <> "DM",
			        customer_contact_info_marketing[campaign_legend_lebel] = "Clicked" ||
			        customer_contact_info_marketing[campaign_legend_lebel] = "Marked Unsubscribe",
			        IF(
			            ISBLANK(SelectedCampaign),
			            TRUE(),
			            customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			
			        -- Keep client grouping context
			        ALLEXCEPT(member_dimension, member_dimension[client_id_name]),
			
			        -- Enable inactive relationship for date filtering
			        USERELATIONSHIP(date_table[date], customer_contact_info_marketing[date])
			    )
			
			RETURN
			IF(ISBLANK(a), 0, a)
			
			```
		formatString: #,0
		lineageTag: b8b5d5af-746a-4614-b463-32397dcd8be5

	measure 'earning points' = ```
			
			// var a =CALCULATE(DISTINCTCOUNT(points_awarded[user_id]), USERELATIONSHIP(date_table[date], points_awarded[award_date]))
			// RETURN
			// IF(ISBLANK(a),0,a)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// VAR CampaignStart = CALCULATE(MIN(customer_contact_info_marketing[campaign_start_date]))
			// VAR CampaignEnd = CALCULATE(MAX(customer_contact_info_marketing[campaign_end_date]))
			// VAR Result =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(points_awarded[user_id]),
			//             USERELATIONSHIP(date_table[date], points_awarded[award_date]),
			//             points_awarded[award_date] >= CampaignStart,
			//             points_awarded[award_date] <= CampaignEnd
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(points_awarded[user_id]),
			//             USERELATIONSHIP(date_table[date], points_awarded[award_date])
			//         )
			//     )
			// RETURN IF(ISBLANK(Result), 0, Result)
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Get list of user_ids for the selected campaign
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Apply to points_awarded table using TREATAS
			VAR a =
			    CALCULATE(
			        DISTINCTCOUNT(points_awarded[user_id]),
			        USERELATIONSHIP(date_table[date], points_awarded[award_date]),
			        TREATAS(CampaignFilteredUsers, points_awarded[user_id])
			    )
			
			RETURN
			IF(ISBLANK(a), 0, a)
			
			```
		formatString: #,0
		lineageTag: 927e1424-0616-4c12-b60f-bfd35c18bfbd

	measure 'earning HSA_HRA_HIA' = ```
			
			// var a = CALCULATE(DISTINCTCOUNT(incentive_earning_detail[user_id]), incentive_earning_detail[reward_type] = "HSA" ||  incentive_earning_detail[reward_type] = "HRA" ||  incentive_earning_detail[reward_type] = "HIA", USERELATIONSHIP(date_table[date],incentive_earning_detail[fulfillment_date]))
			// RETURN
			// IF(ISBLANK(a),0,a)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// VAR CampaignStart = CALCULATE(MIN(customer_contact_info_marketing[campaign_start_date]))
			// VAR CampaignEnd = CALCULATE(MAX(customer_contact_info_marketing[campaign_end_date]))
			// VAR Result =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             incentive_earning_detail[reward_type] IN {"HSA", "HRA", "HIA"},
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date]),
			//             incentive_earning_detail[fulfillment_date] >= CampaignStart,
			//             incentive_earning_detail[fulfillment_date] <= CampaignEnd
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             incentive_earning_detail[reward_type] IN {"HSA", "HRA", "HIA"},
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         )
			//     )
			// RETURN IF(ISBLANK(Result), 0, Result)
			
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Get user_id list from selected campaign
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Calculate distinct user count for HSA/HRA/HIA rewards
			VAR a =
			    CALCULATE(
			        DISTINCTCOUNT(incentive_earning_detail[user_id]),
			        incentive_earning_detail[reward_type] IN { "HSA", "HRA", "HIA" },
			        USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date]),
			        TREATAS(CampaignFilteredUsers, incentive_earning_detail[user_id])
			    )
			
			RETURN IF(ISBLANK(a), 0, a)
			
			```
		formatString: #,0
		lineageTag: 2a5d7e14-0135-4d99-a68f-eca2d23ce31b

	measure Client_name =
			
			var a = "Client Name: " & SELECTEDVALUE('member_dimension'[client_name])
			var b = CALCULATE(
			    MAX('date_table'[date]),
			    VALUES('date_table')
			)
			RETURN
			a
		lineageTag: 0a86e2f7-77e3-495d-8a18-3c88e103bbd9

	measure 'challenge joins' = ```
			
			// var a = CALCULATE(DISTINCTCOUNT(challenge_members_fact[user_id]), USERELATIONSHIP(date_table[date],challenge_members_fact[new_start]))
			// RETURN
			// IF(ISBLANK(a),0,a)
			
			 
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR StartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR EndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR JoinedUsers =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(challenge_members_fact[user_id]),
			//             challenge_members_fact[new_start] >= StartDate,
			//             challenge_members_fact[new_start] <= EndDate,
			//             USERELATIONSHIP(date_table[date], challenge_members_fact[new_start])
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(challenge_members_fact[user_id]),
			//             USERELATIONSHIP(date_table[date], challenge_members_fact[new_start])
			//         )
			//     )
			
			// RETURN IF(ISBLANK(JoinedUsers), 0, JoinedUsers)
			
			
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Filtered list of user_ids based on selected campaign
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Final measure with campaign-based user filter
			VAR a = 
			    CALCULATE(
			        DISTINCTCOUNT(challenge_members_fact[user_id]),
			        USERELATIONSHIP(date_table[date], challenge_members_fact[new_start]),
			        TREATAS(CampaignFilteredUsers, challenge_members_fact[user_id])
			    )
			
			RETURN IF(ISBLANK(a), 0, a)
			
			```
		formatString: #,0
		lineageTag: 17d688cd-b2c0-4567-b623-25312789780d

	measure 'challenge completed' = ```
			
			// var a = CALCULATE(DISTINCTCOUNT(challenge_members_fact[user_id]),challenge_members_fact[milestone_achieved]=1, USERELATIONSHIP(date_table[date],challenge_members_fact[new_start]))
			// RETURN
			// IF(ISBLANK(a),0,a)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR StartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR EndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR Completed =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(challenge_members_fact[user_id]),
			//             challenge_members_fact[milestone_achieved] = 1,
			//             challenge_members_fact[new_start] >= StartDate,
			//             challenge_members_fact[new_start] <= EndDate,
			//             USERELATIONSHIP(date_table[date], challenge_members_fact[new_start])
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(challenge_members_fact[user_id]),
			//             challenge_members_fact[milestone_achieved] = 1,
			//             USERELATIONSHIP(date_table[date], challenge_members_fact[new_start])
			//         )
			//     )
			
			// RETURN IF(ISBLANK(Completed), 0, Completed)
			
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- User list filtered by selected campaign
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Users who completed the challenge, filtered by campaign
			VAR a =
			    CALCULATE(
			        DISTINCTCOUNT(challenge_members_fact[user_id]),
			        challenge_members_fact[milestone_achieved] = 1,
			        USERELATIONSHIP(date_table[date], challenge_members_fact[new_start]),
			        TREATAS(CampaignFilteredUsers, challenge_members_fact[user_id])
			    )
			
			RETURN
			IF(ISBLANK(a), 0, a)
			
			```
		formatString: #,0
		lineageTag: fdbd0922-0ccd-4450-b8f3-51442fca8a38

	measure Campaign_name =
			
			var a = "Campaign Name: " & SELECTEDVALUE('customer_contact_info_marketing'[campaign_name])
			var b = CALCULATE(
			    MAX('date_table'[date]),
			    VALUES('date_table')
			)
			RETURN
			a
		lineageTag: b957a3f2-d680-42d2-be09-738a0af10add

	measure Brac = "(" & 20 & "%)"
		lineageTag: 6b04ca1e-cfe3-44cf-8d35-df9164ffe988

	measure 'biometric screening' = ```
			
			// var a = CALCULATE(DISTINCTCOUNT(incentive_earning_detail[user_id]), SEARCH("BIOSCREEN", incentive_earning_detail[activity_id], 1, 0),USERELATIONSHIP(date_table[date],incentive_earning_detail[fulfillment_date]))
			// RETURN
			// IF(ISBLANK(a), 0, a)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// VAR StartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			// VAR EndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			// VAR ActivityCount =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             SEARCH("BIOSCREEN", incentive_earning_detail[activity_id], 1, 0),
			//             incentive_earning_detail[fulfillment_date] >= StartDate,
			//             incentive_earning_detail[fulfillment_date] <= EndDate,
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             SEARCH("BIOSCREEN", incentive_earning_detail[activity_id], 1, 0),
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         )
			//     )
			// RETURN IF(ISBLANK(ActivityCount), 0, ActivityCount)
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Get user_id list based on campaign filter
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Calculate biometric screenings
			VAR a =
			    CALCULATE(
			        DISTINCTCOUNT(incentive_earning_detail[user_id]),
			        SEARCH("BIOSCREEN", incentive_earning_detail[activity_id], 1, 0),
			        USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date]),
			        TREATAS(CampaignFilteredUsers, incentive_earning_detail[user_id])
			    )
			
			RETURN
			IF(ISBLANK(a), 0, a)
			
			```
		formatString: #,0
		lineageTag: da69efc6-4cde-4e78-9fa2-7b7b189ccf01

	measure B = 0
		formatString: 0
		lineageTag: ba2cbdca-5134-4254-a059-58b805525a69

	measure 'app downloads' = ```
			
			VAR app = CALCULATE(DISTINCTCOUNT('member_last_activity_bi'[user_id]), 'member_last_activity_bi'[platform] = "app",USERELATIONSHIP(member_last_activity_bi[last_session_date],'date_table'[date]))
			RETURN
			IF(ISBLANK(app),0, app)
			
			// VAR min_date_ =
			//     CALCULATE(
			//         MIN('date_table'[date]),
			//         VALUES('date_table')
			//     )
			// VAR max_date_ =
			//     CALCULATE(
			//         MAX('date_table'[date]),
			//         VALUES('date_table')
			//     )
			   
			// VAR b =
			//     SELECTCOLUMNS(
			//         ADDCOLUMNS(
			//             SUMMARIZE(
			//                 FILTER(
			//                     member_dimension,
			//                     member_dimension[start_date] >= min_date_ &&
			//                     member_dimension[start_date] <= max_date_
			//                 ),
			//                 member_dimension[user_id],
			//                 "Max_Start_Date", MAX(member_dimension[start_date])
			//             ),
			//             "Emp_concat", member_dimension[user_id] & "-" & [Max_Start_Date]
			//         ),
			//         [Emp_concat]
			//     )
			   
			// VAR reduction =
			//     FILTER(
			//         member_dimension,
			//          (member_dimension[Concated_fiels] IN b))
			 
			// var a =   CALCULATE(DISTINCTCOUNT('member_dimension'[user_id]),reduction,'member_last_activity_bi'[platform]="app",
			//         'member_dimension'[terms_and_conditions_acceptance_date]<= max_date_)
			 
			// Return
			// a
			```
		formatString: #,0
		lineageTag: fb368b22-deae-401e-814b-4c5924801735

	measure 'app active users' = ```
			
			// VAR wau = 
			//     CALCULATE(
			//         DISTINCTCOUNT('customer_contact_info_marketing'[user_id]),
			//         USERELATIONSHIP(customer_contact_info_marketing[user_id], member_last_activity_bi[user_id]),
			//         USERELATIONSHIP(date_table[date], customer_contact_info_marketing[date]),
			//         FILTER(
			//             member_last_activity_bi, 
			//             member_last_activity_bi[platform] = "app"
			//         )
			//         // You can uncomment below if you want to filter by action in the future
			//         // FILTER(tracking_action_events, tracking_action_events[action] = "logged in")
			//     )
			// -----------------
			// var totalusers = CALCULATE(DISTINCTCOUNT(member_last_activity_bi[user_id]),member_last_activity_bi[platform] = "app", USERELATIONSHIP(date_table[date],member_last_activity_bi[last_session_date]))
			// RETURN
			// IF(ISBLANK(totalusers), 0, totalusers)
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// -- Define campaign start and end dates
			// VAR CampaignStartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR CampaignEndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// -- Calculate total users based on logic
			// VAR TotalUsers =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(member_last_activity_bi[user_id]),
			//             member_last_activity_bi[platform] = "app" &&
			//             member_last_activity_bi[last_session_date] >= CampaignStartDate &&
			//             member_last_activity_bi[last_session_date] <= CampaignEndDate
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(member_last_activity_bi[user_id]),
			//             member_last_activity_bi[platform] = "app",
			//             USERELATIONSHIP(date_table[date], member_last_activity_bi[last_session_date])
			//         )
			//     )
			
			// RETURN
			// IF(ISBLANK(TotalUsers), 0, TotalUsers)
			
			
			
			
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Campaign-based user filtering
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Calculate distinct app users with campaign filter
			VAR totalusers =
			    CALCULATE(
			        DISTINCTCOUNT(member_last_activity_bi[user_id]),
			        member_last_activity_bi[platform] = "app",
			        USERELATIONSHIP(date_table[date], member_last_activity_bi[last_session_date]),
			        TREATAS(CampaignFilteredUsers, member_last_activity_bi[user_id])
			    )
			
			RETURN
			IF(ISBLANK(totalusers), 0, totalusers)
			
			```
		formatString: #,0
		lineageTag: 4a552227-516a-4d0b-b240-2e66125b1135

	measure 'annual physical' = ```
			
			// var a = CALCULATE(DISTINCTCOUNT(incentive_earning_detail[user_id]), SEARCH("Annual Physical", incentive_earning_detail[activity_description], 1, 0),USERELATIONSHIP(date_table[date],incentive_earning_detail[fulfillment_date]))
			// RETURN
			// IF(ISBLANK(a), 0, a)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// VAR StartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			// VAR EndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			// VAR ActivityCount =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             SEARCH("Annual Physical", incentive_earning_detail[activity_description], 1, 0),
			//             incentive_earning_detail[fulfillment_date] >= StartDate,
			//             incentive_earning_detail[fulfillment_date] <= EndDate,
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             SEARCH("Annual Physical", incentive_earning_detail[activity_description], 1, 0),
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         )
			//     )
			// RETURN IF(ISBLANK(ActivityCount), 0, ActivityCount)
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Filter user IDs based on selected campaign or return all if not selected
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Calculate annual physical completions
			VAR a =
			    CALCULATE(
			        DISTINCTCOUNT(incentive_earning_detail[user_id]),
			        SEARCH("Annual Physical", incentive_earning_detail[activity_description], 1, 0),
			        USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date]),
			        TREATAS(CampaignFilteredUsers, incentive_earning_detail[user_id])
			    )
			
			RETURN
			IF(ISBLANK(a), 0, a)
			
			```
		formatString: #,0
		lineageTag: be726a58-6b7a-4bab-a4f4-1fde3d60f852

	measure 'active users' = ```
			
			// VAR ActiveUsers = 
			//     CALCULATE(
			//         DISTINCTCOUNT('member_last_activity_bi'[user_id]), USERELATIONSHIP(date_table[date],member_last_activity_bi[last_session_date])
			//     )
			// RETURN
			// IF(ISBLANK(ActiveUsers),
			//     0,
			//     ActiveUsers
			// )
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR CampaignStartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         FILTER(customer_contact_info_marketing, customer_contact_info_marketing[campaign_name] = SelectedCampaign)
			//     )
			
			// VAR CampaignEndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         FILTER(customer_contact_info_marketing, customer_contact_info_marketing[campaign_name] = SelectedCampaign)
			//     )
			
			// VAR ActiveUsers = 
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         -- When campaign is selected, filter using campaign dates directly
			//         CALCULATE(
			//             DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			//             FILTER(
			//                 'member_last_activity_bi',
			//                 'member_last_activity_bi'[last_session_date] >= CampaignStartDate &&
			//                 'member_last_activity_bi'[last_session_date] <= CampaignEndDate
			//             )
			//         ),
			//         -- Else fallback to using date_table[date] via USERELATIONSHIP
			//         CALCULATE(
			//             DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			//             USERELATIONSHIP('date_table'[date], 'member_last_activity_bi'[last_session_date])
			//         )
			//     )
			
			// RETURN
			// IF(ISBLANK(ActiveUsers), 0, ActiveUsers)
			
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// -- Define campaign start date as a separate variable
			// VAR CampaignStartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// -- Define campaign end date as a separate variable
			// VAR CampaignEndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// -- Define the calculation for active users based on campaign dates or fallback to total calculation
			// VAR ActiveUsers =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         -- If a campaign is selected, filter by campaign start and end dates
			//         CALCULATE(
			//             DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			//             'member_last_activity_bi'[last_session_date] >= CampaignStartDate &&
			//             'member_last_activity_bi'[last_session_date] <= CampaignEndDate
			//         ),
			//         -- Fallback: use the relationship with the date table
			//         CALCULATE(
			//             DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			//             USERELATIONSHIP('date_table'[date], 'member_last_activity_bi'[last_session_date])
			//         )
			//     )
			
			// -- Return the result, ensuring it’s zero if no data exists
			// RETURN IF(ISBLANK(ActiveUsers), 0, ActiveUsers)
			
			
			
			
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR ActiveUsers =
			//     CALCULATE(
			//         DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			//         USERELATIONSHIP(date_table[date], member_last_activity_bi[last_session_date]),
			//         TREATAS(
			//             SELECTCOLUMNS(
			//                 FILTER(
			//                     customer_contact_info_marketing,
			//                     ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//                 ),
			//                 "user_id", customer_contact_info_marketing[user_id]
			//             ),
			//             'member_last_activity_bi'[user_id]
			//         )
			//     )
			
			// RETURN
			// IF(ISBLANK(ActiveUsers), 0, ActiveUsers)
			
			
			
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// -- Get filtered user list from campaign data
			// VAR FilteredUserIDs =
			//     SELECTCOLUMNS(
			//         FILTER(
			//             customer_contact_info_marketing,
			//             ISBLANK(SelectedCampaign) ||
			//             customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//         ),
			//         "user_id", customer_contact_info_marketing[user_id]
			//     )
			
			// -- Calculate distinct active users from member_last_activity_bi
			// VAR ActiveUsers =
			//         CALCULATE(
			//         DISTINCTCOUNT('member_last_activity_bi'[user_id]), USERELATIONSHIP(date_table[date],member_last_activity_bi[last_session_date]),
			//         ALLEXCEPT(member_dimension,member_dimension[client_id_name])
			//     )
			
			
			// RETURN
			// IF(ISBLANK(ActiveUsers), 0, ActiveUsers)
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Get user_ids based on selected campaign (or all if none selected)
			VAR FilteredUserIDs =
			    FILTER(
			        ALL(customer_contact_info_marketing),
			        ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			    )
			
			-- Final calculation: count distinct user_ids in member_last_activity_bi
			VAR ActiveUsers =
			    CALCULATE(
			        DISTINCTCOUNT(member_last_activity_bi[user_id]),
			        
			        -- Ensure campaign filtering via a virtual relationship
			        TREATAS(
			            SELECTCOLUMNS(FilteredUserIDs, "user_id", customer_contact_info_marketing[user_id]),
			            member_last_activity_bi[user_id]
			        ),
			
			        -- Use the inactive relationship with date
			        USERELATIONSHIP(date_table[date], member_last_activity_bi[last_session_date]),
			
			        -- Preserve client_id context
			        ALLEXCEPT(member_dimension, member_dimension[client_id_name])
			    )
			
			RETURN
			IF(ISBLANK(ActiveUsers), 0, ActiveUsers)
			
			```
		formatString: #,0
		lineageTag: 7227def3-8406-4d3a-95a4-8bddd27be739

	measure A = 0.0
		formatString: 0%;-0%;0%
		lineageTag: acbe11f4-e5e5-4da0-8d7b-78d8843c12cb

	measure '%unique members touched' =
			
			var a = DIVIDE([unique members touched],[unique members eligible for rally engage],0)
			RETURN
			IF(ISBLANK(a),0,a)
		formatString: 0%;-0%;0%
		lineageTag: 6fdf4099-771a-4ba9-b8b6-ff1ea219f9a6

	measure '%user redeeming gift card' = ```
			
			// VAR RedeemingUsers = CALCULATE(DISTINCTCOUNT(gift_card_redemption[user_id]), USERELATIONSHIP(date_table[date], gift_card_redemption[reward_issue_date]))
			// VAR TotalUsers = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			// VAR Percentage = DIVIDE(RedeemingUsers, TotalUsers, 0) 
			// RETURN
			// IF(ISBLANK(Percentage),0,Percentage)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// VAR StartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			// VAR EndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			// VAR RedeemingUsers =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(gift_card_redemption[user_id]),
			//             USERELATIONSHIP(date_table[date], gift_card_redemption[reward_issue_date]),
			//             gift_card_redemption[reward_issue_date] >= StartDate,
			//             gift_card_redemption[reward_issue_date] <= EndDate
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(gift_card_redemption[user_id]),
			//             USERELATIONSHIP(date_table[date], gift_card_redemption[reward_issue_date])
			//         )
			//     )
			// VAR TotalUsers =
			//     CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			// RETURN
			//     IF(ISBLANK(DIVIDE(RedeemingUsers, TotalUsers, 0)),0, DIVIDE(RedeemingUsers, TotalUsers, 0))
			
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Step 1: Filter user_ids based on selected campaign (if any)
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Step 2: Calculate redeeming users with campaign filter
			VAR RedeemingUsers =
			    CALCULATE(
			        DISTINCTCOUNT(gift_card_redemption[user_id]),
			        USERELATIONSHIP(date_table[date], gift_card_redemption[reward_issue_date]),
			        TREATAS(CampaignFilteredUsers, gift_card_redemption[user_id])
			    )
			
			-- Step 3: Calculate total users from filtered campaign
			VAR TotalUsers =
			    CALCULATE(
			        DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			        TREATAS(CampaignFilteredUsers, customer_contact_info_marketing[user_id])
			    )
			
			-- Step 4: Calculate percentage
			VAR Percentage = DIVIDE(RedeemingUsers, TotalUsers, 0)
			
			RETURN
			IF(ISBLANK(Percentage), 0, Percentage)
			
			```
		lineageTag: 47adf885-5b44-42f3-b17c-07ee23beb08b

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '%annual physical' = DIVIDE([annual physical], [unique members touched], 0)
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: 065aa95c-82a0-4b91-bfae-87ed12089953

	measure '%biometric screening' = DIVIDE([biometric screening], [unique members touched], 0)
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: f6934f71-0192-4a66-8464-b2cee5fe9f2e

	measure '%challenge completed' = ```
			
			
			// var complete = CALCULATE(DISTINCTCOUNT(challenge_members_fact[user_id]),challenge_members_fact[milestone_achieved]=1, USERELATIONSHIP(date_table[date],challenge_members_fact[new_start]))
			
			// var totalusers = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			
			// var rate = DIVIDE(complete,totalusers,0)
			
			// RETURN
			// IF(ISBLANK(rate),0,rate)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR StartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR EndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR Completed =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(challenge_members_fact[user_id]),
			//             challenge_members_fact[milestone_achieved] = 1,
			//             challenge_members_fact[new_start] >= StartDate,
			//             challenge_members_fact[new_start] <= EndDate,
			//             USERELATIONSHIP(date_table[date], challenge_members_fact[new_start])
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(challenge_members_fact[user_id]),
			//             challenge_members_fact[milestone_achieved] = 1,
			//             USERELATIONSHIP(date_table[date], challenge_members_fact[new_start])
			//         )
			//     )
			
			// VAR TotalUsers =
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id])
			//     )
			
			// VAR Rate = DIVIDE(Completed, TotalUsers, 0)
			
			// RETURN
			// IF(ISBLANK(Rate), 0, Rate)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			 
			// -- Step 1: Get campaign-filtered user IDs
			
			// VAR CampaignFilteredUsers =
			
			//     SELECTCOLUMNS(
			
			//         FILTER(
			
			//             customer_contact_info_marketing,
			
			//             ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			
			//         ),
			
			//         "user_id", customer_contact_info_marketing[user_id]
			
			//     )
			 
			// -- Step 2: Calculate challenge completions (milestone_achieved = 1)
			
			// VAR complete =
			
			//     CALCULATE(
			
			//         DISTINCTCOUNT(challenge_members_fact[user_id]),
			
			//         challenge_members_fact[milestone_achieved] = 1,
			
			//         USERELATIONSHIP(date_table[date], challenge_members_fact[new_start]),
			
			//         TREATAS(CampaignFilteredUsers, challenge_members_fact[user_id])
			
			//     )
			 
			// -- Step 3: Total campaign-filtered users
			
			// VAR totalusers =
			
			//     CALCULATE(
			
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			
			//         TREATAS(CampaignFilteredUsers, customer_contact_info_marketing[user_id])
			
			//     )
			 
			-- Step 4: Calculate completion rate
			
			VAR rate = DIVIDE([challenge completed], [unique members touched], 0)
			 
			RETURN
			
			IF(ISBLANK(rate), 0, rate)
			
			 
			```
		formatString: 0%;-0%;0%
		lineageTag: 76e45c16-932c-4f28-9bdc-481971fe0581

	measure '%challenge join' = ```
			
			
			// var joined = CALCULATE(DISTINCTCOUNT(challenge_members_fact[user_id]), USERELATIONSHIP(date_table[date],challenge_members_fact[new_start]))
			
			// var totalusers = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			
			// var rate = DIVIDE(joined,totalusers,0)
			
			// RETURN
			// IF(ISBLANK(rate),0,rate)
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR StartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR EndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR JoinedUsers =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(challenge_members_fact[user_id]),
			//             challenge_members_fact[new_start] >= StartDate,
			//             challenge_members_fact[new_start] <= EndDate,
			//             USERELATIONSHIP(date_table[date], challenge_members_fact[new_start])
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(challenge_members_fact[user_id]),
			//             USERELATIONSHIP(date_table[date], challenge_members_fact[new_start])
			//         )
			//     )
			
			// VAR TotalUsers = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			
			// VAR Rate = DIVIDE(JoinedUsers, TotalUsers, 0)
			
			// RETURN IF(ISBLANK(Rate), 0, Rate)
			
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// -- User list filtered by selected campaign
			// VAR CampaignFilteredUsers =
			//     SELECTCOLUMNS(
			//         FILTER(
			//             customer_contact_info_marketing,
			//             ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//         ),
			//         "user_id", customer_contact_info_marketing[user_id]
			//     )
			
			// -- Users who joined challenge, filtered by campaign
			// VAR joined =
			//     CALCULATE(
			//         DISTINCTCOUNT(challenge_members_fact[user_id]),
			//         USERELATIONSHIP(date_table[date], challenge_members_fact[new_start]),
			//         TREATAS(CampaignFilteredUsers, challenge_members_fact[user_id])
			//     )
			
			// -- Total users touched in campaign
			// VAR totalusers =
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//         TREATAS(CampaignFilteredUsers, customer_contact_info_marketing[user_id])
			//     )
			
			-- Final percentage calculation
			VAR rate = DIVIDE([challenge joins], [unique members touched], 0)
			
			RETURN
			IF(ISBLANK(rate), 0, rate)
			
			```
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: ecc7382c-ecff-43c0-9cfb-3714b6517cea

	measure '%earning HSA_HRA_HIA' = ```
			
			// var users = CALCULATE(DISTINCTCOUNT(incentive_earning_detail[user_id]), incentive_earning_detail[reward_type] = "HSA" ||  incentive_earning_detail[reward_type] = "HRA" ||  incentive_earning_detail[reward_type] = "HIA", USERELATIONSHIP(date_table[date],incentive_earning_detail[fulfillment_date]))
			// var totalusers = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			// var c = DIVIDE(users, totalusers, 0)
			// RETURN
			// IF(ISBLANK(c),0,c)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// VAR StartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			// VAR EndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			// VAR TotalUsers =
			//     CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			// VAR RewardUsers =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             incentive_earning_detail[reward_type] IN {"HSA", "HRA", "HIA"},
			//             incentive_earning_detail[fulfillment_date] >= StartDate,
			//             incentive_earning_detail[fulfillment_date] <= EndDate,
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             incentive_earning_detail[reward_type] IN {"HSA", "HRA", "HIA"},
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         )
			//     )
			// RETURN
			//     IF(ISBLANK(DIVIDE(RewardUsers, TotalUsers, 0)),0, DIVIDE(RewardUsers, TotalUsers, 0))
			
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- User list filtered by campaign if selected
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Users earning HSA/HRA/HIA
			VAR users =
			    CALCULATE(
			        DISTINCTCOUNT(incentive_earning_detail[user_id]),
			        incentive_earning_detail[reward_type] IN { "HSA", "HRA", "HIA" },
			        USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date]),
			        TREATAS(CampaignFilteredUsers, incentive_earning_detail[user_id])
			    )
			
			-- Total users for that campaign
			VAR totalusers =
			    CALCULATE(
			        DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			        TREATAS(CampaignFilteredUsers, customer_contact_info_marketing[user_id])
			    )
			
			-- Final ratio
			VAR c = DIVIDE(users, totalusers, 0)
			
			RETURN IF(ISBLANK(c), 0, c)
			
			```
		lineageTag: c0bb152d-5c08-42fa-87db-182fd585f8ab

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '%earning points' = ```
			
			// var totalusers = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			// var earningpoints =CALCULATE(DISTINCTCOUNT(points_awarded[user_id]), USERELATIONSHIP(date_table[date], points_awarded[award_date]))
			// var c = DIVIDE(earningpoints, totalusers, 0)
			// RETURN
			// IF(ISBLANK(c), 0, c)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR StartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR EndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR TotalUsers =
			//     CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			
			// VAR EarningPoints =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(points_awarded[user_id]),
			//             USERELATIONSHIP(date_table[date], points_awarded[award_date]),
			//             points_awarded[award_date] >= StartDate,
			//             points_awarded[award_date] <= EndDate
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(points_awarded[user_id]),
			//             USERELATIONSHIP(date_table[date], points_awarded[award_date])
			//         )
			//     )
			
			// RETURN
			//     IF(ISBLANK(DIVIDE(EarningPoints, TotalUsers, 0)),0, DIVIDE(EarningPoints, TotalUsers, 0))
			
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Step 1: Get user_ids linked to the selected campaign
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Step 2: Calculate total users for selected campaign
			VAR totalusers =
			    CALCULATE(
			        DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			        TREATAS(CampaignFilteredUsers, customer_contact_info_marketing[user_id])
			    )
			
			-- Step 3: Calculate users earning points filtered by campaign and date
			VAR earningpoints =
			    CALCULATE(
			        DISTINCTCOUNT(points_awarded[user_id]),
			        USERELATIONSHIP(date_table[date], points_awarded[award_date]),
			        TREATAS(CampaignFilteredUsers, points_awarded[user_id])
			    )
			
			-- Step 4: Calculate percentage
			VAR c = DIVIDE(earningpoints, totalusers, 0)
			
			RETURN
			IF(ISBLANK(c), 0, c)
			
			```
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: cae6a1ab-ac8f-4211-a206-dce140892e0d

	measure '%email click' = ```
			
			
			// var a = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]), customer_contact_info_marketing[channel] <> "DM",customer_contact_info_marketing[campaign_legend_lebel] = "Clicked")
			// var b = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			// var c = DIVIDE(a,b, 0)
			// RETURN 
			// IF(ISBLANK(c),0,c)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// -- Numerator: Users who clicked
			// VAR a =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//             customer_contact_info_marketing[campaign_legend_lebel] = "Clicked",
			//             FILTER(
			//                 customer_contact_info_marketing,
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign &&
			//                 customer_contact_info_marketing[campaign_start_date] <= MAX('date_table'[date]) &&
			//                 customer_contact_info_marketing[campaign_end_date] >= MIN('date_table'[date])
			//             )
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//             customer_contact_info_marketing[campaign_legend_lebel] = "Clicked"
			//         )
			//     )
			
			// -- Denominator: Total users in context
			// // VAR b =
			// //     IF(
			// //         NOT ISBLANK(SelectedCampaign),
			// //         CALCULATE(
			// //             DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			// //             FILTER(
			// //                 customer_contact_info_marketing,
			// //                 customer_contact_info_marketing[campaign_name] = SelectedCampaign &&
			// //                 customer_contact_info_marketing[campaign_start_date] <= MAX('date_table'[date]) &&
			// //                 customer_contact_info_marketing[campaign_end_date] >= MIN('date_table'[date])
			// //             )
			// //         ),
			// //         CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			// //     )
			
			// -- % Calculation
			// VAR c = DIVIDE(a, [email sent], 0)
			
			// RETURN 
			// IF(ISBLANK(c), 0, c)
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR a =
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//         FILTER(
			//             customer_contact_info_marketing,
			//             customer_contact_info_marketing[channel] <> "DM" &&
			//             customer_contact_info_marketing[campaign_legend_lebel] = "Clicked" &&
			//             (
			//                 ISBLANK(SelectedCampaign) ||
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//             )
			//         )
			//     )
			
			// VAR b =
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//         FILTER(
			//             customer_contact_info_marketing,
			//             ISBLANK(SelectedCampaign) ||
			//             customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//         )
			//     )
			
			VAR c = DIVIDE([email click],[email delivered], 0)
			
			RETURN 
			IF(ISBLANK(c), 0, c)
			
			```
		formatString: 0%;-0%;0%
		lineageTag: a2cba5e9-0b8a-49c7-ab07-fe8078435baa

	measure '%email delivered' = ```
			
			
			// var a = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]),customer_contact_info_marketing[channel] <> "DM", customer_contact_info_marketing[campaign_legend_lebel] = "Delivered")
			// var b = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			// var c = DIVIDE(a,b, 0)
			
			// RETURN 
			// IF(ISBLANK(c),0,c)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR a =
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//         FILTER(
			//             customer_contact_info_marketing,
			//             customer_contact_info_marketing[channel] <> "DM" &&
			//             customer_contact_info_marketing[campaign_legend_lebel] = "Delivered" ||
			//             customer_contact_info_marketing[campaign_legend_lebel] = "Marked Unsubscribe" ||
			//             customer_contact_info_marketing[campaign_legend_lebel] = "Opened" ||
			//             customer_contact_info_marketing[campaign_legend_lebel] = "Clicked"
			//              &&
			//             (
			//                 ISBLANK(SelectedCampaign) ||
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//             )
			//         )
			//     )
			
			// VAR b =
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//         FILTER(
			//             customer_contact_info_marketing,
			//             ISBLANK(SelectedCampaign) ||
			//             customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//         )
			//     )
			
			VAR c = DIVIDE([email delivered], [email sent], 0)
			
			RETURN 
			IF(ISBLANK(c), 0, c)
			
			```
		formatString: 0%;-0%;0%
		lineageTag: 9eec3069-ecfb-4178-9cc9-d6a7a5423b87

	measure '%email opened' = ```
			
			
			// var a = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]), customer_contact_info_marketing[channel] <> "DM",customer_contact_info_marketing[campaign_legend_lebel] = "Opened" || customer_contact_info_marketing[campaign_legend_lebel] = "Clicked" )
			// var b = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			// var c = DIVIDE(a,b, 0)
			// RETURN 
			// IF(ISBLANK(c),0,c)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// VAR a =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//             customer_contact_info_marketing[campaign_legend_lebel] IN { "Opened", "Clicked" },
			//             FILTER(
			//                 customer_contact_info_marketing,
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign &&
			//                 customer_contact_info_marketing[campaign_start_date] <= MAX('date_table'[date]) &&
			//                 customer_contact_info_marketing[campaign_end_date] >= MIN('date_table'[date])
			//             )
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//             customer_contact_info_marketing[campaign_legend_lebel] IN { "Opened", "Clicked" }
			//         )
			//     )
			// // VAR b =
			// //     IF(
			// //         NOT ISBLANK(SelectedCampaign),
			// //         CALCULATE(
			// //             DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			// //             FILTER(
			// //                 customer_contact_info_marketing,
			// //                 customer_contact_info_marketing[campaign_name] = SelectedCampaign &&
			// //                 customer_contact_info_marketing[campaign_start_date] <= MAX('date_table'[date]) &&
			// //                 customer_contact_info_marketing[campaign_end_date] >= MIN('date_table'[date])
			// //             )
			// //         ),
			// //         CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			// //     )
			// VAR c = DIVIDE(a, [email sent], 0)
			// RETURN 
			// IF(ISBLANK(c), 0, c)
			
			
			
			
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR a =
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//         FILTER(
			//             customer_contact_info_marketing,
			//             customer_contact_info_marketing[channel] <> "DM" &&
			//             (
			//                 customer_contact_info_marketing[campaign_legend_lebel] = "Opened" ||
			//                 customer_contact_info_marketing[campaign_legend_lebel] = "Clicked"
			//             ) &&
			//             (
			//                 ISBLANK(SelectedCampaign) ||
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//             )
			//         )
			//     )
			
			// VAR b =
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//         FILTER(
			//             customer_contact_info_marketing,
			//             ISBLANK(SelectedCampaign) ||
			//             customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//         )
			//     )
			
			VAR c = DIVIDE([email opened], [email delivered], 0)
			
			RETURN 
			IF(ISBLANK(c), 0, c)
			
			```
		formatString: 0%;-0%;0%
		lineageTag: 4e28f61c-a6a9-49e8-a2da-f221cea00c24

	measure '%email sent' = ```
			
			// var a =
			// CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//  customer_contact_info_marketing[channel] <> "DM",
			// customer_contact_info_marketing[campaign_legend_lebel] = "Delivered" ||
			// customer_contact_info_marketing[campaign_legend_lebel] = "Marked Unsubscribe")
			// var b = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			// var c = DIVIDE(a,b, 0)
			// RETURN 
			// IF(ISBLANK(c),0,c)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR a =
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//         FILTER(
			//             customer_contact_info_marketing,
			//             customer_contact_info_marketing[channel] <> "DM" &&
			//             (
			//                 customer_contact_info_marketing[campaign_legend_lebel] = "Delivered" ||
			//                 customer_contact_info_marketing[campaign_legend_lebel] = "Marked Unsubscribe"
			//             ) &&
			//             (
			//                 ISBLANK(SelectedCampaign) ||
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//             )
			//         )
			//     )
			
			// // VAR b =
			// //     CALCULATE(
			// //         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			// //         FILTER(
			// //             customer_contact_info_marketing,
			// //             ISBLANK(SelectedCampaign) ||
			// //             customer_contact_info_marketing[campaign_name] = SelectedCampaign
			// //         )
			// //     )
			
			// VAR c = DIVIDE(a, [email sent], 0)
			
			// RETURN IF(ISBLANK(c), 0, c)
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// -- Filtered list of user_ids for the selected campaign
			// VAR CampaignFilteredUsers =
			//     SELECTCOLUMNS(
			//         FILTER(
			//             customer_contact_info_marketing,
			//             ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//         ),
			//         "user_id", customer_contact_info_marketing[user_id]
			//     )
			
			// -- Email delivered or marked unsubscribe (excluding DM channel)
			// VAR a =
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//         customer_contact_info_marketing[channel] <> "DM",
			//         customer_contact_info_marketing[campaign_legend_lebel] IN { "Delivered", "Marked Unsubscribe", "Sent" , "Clicked" , "Opened" },
			//         TREATAS(CampaignFilteredUsers, customer_contact_info_marketing[user_id])
			//     )
			
			// -- Total users (with campaign filtering applied)
			// VAR b =
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//         TREATAS(CampaignFilteredUsers, customer_contact_info_marketing[user_id])
			//     )
			
			VAR c = DIVIDE([email sent], [unique members touched], 0)
			
			RETURN
			IF(ISBLANK(c), 0, c)
			
			```
		formatString: 0%;-0%;0%
		lineageTag: 33e91d82-b2c1-4036-9bed-9aaf90db552c

	measure '%emp provided reward points' = ```
			
			 
			// var empprovidedpoints = CALCULATE(DISTINCTCOUNT(incentive_earning_detail[user_id]), incentive_earning_detail[currency] = "EMPLOYER_POINTS", USERELATIONSHIP(date_table[date],incentive_earning_detail[fulfillment_date]))
			// var totaluser = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			// var rate = DIVIDE(empprovidedpoints, totaluser, 0)
			//  RETURN
			//  IF(ISBLANK(rate), 0, rate)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR StartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR EndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR TotalUsers =
			//     CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			
			// VAR EmpProvidedPoints =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             incentive_earning_detail[currency] = "EMPLOYER_POINTS",
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date]),
			//             incentive_earning_detail[fulfillment_date] >= StartDate,
			//             incentive_earning_detail[fulfillment_date] <= EndDate
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             incentive_earning_detail[currency] = "EMPLOYER_POINTS",
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         )
			//     )
			// RETURN
			//     IF(ISBLANK(DIVIDE(EmpProvidedPoints, TotalUsers, 0)),0, DIVIDE(EmpProvidedPoints, TotalUsers, 0))
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Step 1: Get relevant user_ids for selected campaign
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Step 2: Calculate employer provided points for filtered users
			VAR empprovidedpoints =
			    CALCULATE(
			        DISTINCTCOUNT(incentive_earning_detail[user_id]),
			        incentive_earning_detail[currency] = "EMPLOYER_POINTS",
			        USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date]),
			        TREATAS(CampaignFilteredUsers, incentive_earning_detail[user_id])
			    )
			
			-- Step 3: Total users based on campaign selection
			VAR totaluser =
			    CALCULATE(
			        DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			        TREATAS(CampaignFilteredUsers, customer_contact_info_marketing[user_id])
			    )
			
			-- Step 4: Calculate rate
			VAR rate = DIVIDE(empprovidedpoints, totaluser, 0)
			
			-- Step 5: Return
			RETURN IF(ISBLANK(rate), 0, rate)
			
			```
		lineageTag: af05539d-6bda-4cce-8d16-56a5d73acee7

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '%gymcheckin completed program' = ```
			
			// var gci = CALCULATE(DISTINCTCOUNT(incentive_earning_detail[user_id]), incentive_earning_detail[activity_type] = "rewardableGymCheckin",USERELATIONSHIP(date_table[date],incentive_earning_detail[fulfillment_date]))
			
			// var totalusers =CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			
			// var rate = DIVIDE(gci, totalusers, 0)
			
			// RETURN
			// IF(ISBLANK(rate),0,rate)
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR StartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR EndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR GymCheckins =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             incentive_earning_detail[activity_type] = "rewardableGymCheckin",
			//             incentive_earning_detail[fulfillment_date] >= StartDate &&
			//             incentive_earning_detail[fulfillment_date] <= EndDate,
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             incentive_earning_detail[activity_type] = "rewardableGymCheckin",
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         )
			//     )
			
			// VAR TotalUsers = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			
			// VAR Rate = DIVIDE(GymCheckins, TotalUsers, 0)
			
			// RETURN
			// IF(ISBLANK(Rate), 0, Rate)
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// -- Filter user IDs based on the selected campaign (or all if none selected)
			// VAR CampaignFilteredUsers =
			//     SELECTCOLUMNS(
			//         FILTER(
			//             customer_contact_info_marketing,
			//             ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//         ),
			//         "user_id", customer_contact_info_marketing[user_id]
			//     )
			
			// -- Gym check-in completions (numerator)
			// VAR gci =
			//     CALCULATE(
			//         DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//         incentive_earning_detail[activity_type] = "rewardableGymCheckin",
			//         USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date]),
			//         TREATAS(CampaignFilteredUsers, incentive_earning_detail[user_id])
			//     )
			
			// -- Total users (denominator)
			// VAR totalusers =
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//         TREATAS(CampaignFilteredUsers, customer_contact_info_marketing[user_id])
			//     )
			
			-- Compute the rate
			VAR rate = DIVIDE([gymcheckin completed program], [unique members touched], 0)
			
			RETURN
			IF(ISBLANK(rate), 0, rate)
			
			```
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: eb3130f5-3984-47a1-8ba4-9eeba7694248

	measure '%health survey' = DIVIDE([health survey completions], [unique members touched], 0)
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: b17c6884-e00f-4108-8a6b-f0c41b425700

	measure '%incentives earned' = DIVIDE([incentives earned], [maximum allowed], 0)
		lineageTag: 306a13fa-41e8-4573-979c-94928e598072

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '%member attestation' = DIVIDE([member attestation completion], [unique members touched], 0)
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: 5f525a7f-b649-489e-81b1-3b191a2bf89d

	measure '%mission completed' = ```
			
			
			// var complete = CALCULATE(COUNT(mission_members_fact[user_id]), USERELATIONSHIP(date_table[date],mission_members_fact[mission_completion_date]),mission_members_fact[mission_complete] = "1")
			
			// var totalusers = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			
			// var rate = DIVIDE(complete,totalusers,0)
			
			// RETURN
			// IF(ISBLANK(rate),0,rate)
			
			 
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR StartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR EndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR CompletedUsers =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             COUNT(mission_members_fact[user_id]),
			//             mission_members_fact[mission_complete] = "1",
			//             mission_members_fact[mission_completion_date] >= StartDate,
			//             mission_members_fact[mission_completion_date] <= EndDate,
			//             USERELATIONSHIP(date_table[date], mission_members_fact[mission_completion_date])
			//         ),
			//         CALCULATE(
			//             COUNT(mission_members_fact[user_id]),
			//             mission_members_fact[mission_complete] = "1",
			//             USERELATIONSHIP(date_table[date], mission_members_fact[mission_completion_date])
			//         )
			//     )
			
			// VAR TotalUsers = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			
			// VAR Rate = DIVIDE(CompletedUsers, TotalUsers, 0)
			
			// RETURN
			// IF(ISBLANK(Rate), 0, Rate)
			
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// -- Extract users relevant to selected campaign
			// VAR CampaignFilteredUsers =
			//     SELECTCOLUMNS(
			//         FILTER(
			//             customer_contact_info_marketing,
			//             ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//         ),
			//         "user_id", customer_contact_info_marketing[user_id]
			//     )
			
			// -- Count completed missions for those users
			// VAR complete =
			//     CALCULATE(
			//         COUNT(mission_members_fact[user_id]),
			//         USERELATIONSHIP(date_table[date], mission_members_fact[mission_completion_date]),
			//         mission_members_fact[mission_complete] = "1",
			//         TREATAS(CampaignFilteredUsers, mission_members_fact[user_id])
			//     )
			
			// -- Total users in the campaign
			// VAR totalusers =
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//         TREATAS(CampaignFilteredUsers, customer_contact_info_marketing[user_id])
			//     )
			
			-- Calculate rate
			VAR rate = DIVIDE([mission completed], [unique members touched], 0)
			
			RETURN
			IF(ISBLANK(rate), 0, rate)
			
			```
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: 4a29c23b-0a6e-4580-a766-7af07c10fcd0

	measure '%mission joins' = ```
			
			// var joined = CALCULATE(DISTINCTCOUNT('mission_members_fact'[user_id]),USERELATIONSHIP(date_table[date],mission_members_fact[mission_start_date]))
			
			// var totalusers = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			
			// var rate = DIVIDE(joined, totalusers, 0)
			
			// RETURN
			// IF(ISBLANK(rate),0,rate)
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR StartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR EndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR JoinedUsers =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(mission_members_fact[user_id]),
			//             mission_members_fact[mission_start_date] >= StartDate,
			//             mission_members_fact[mission_start_date] <= EndDate,
			//             USERELATIONSHIP(date_table[date], mission_members_fact[mission_start_date])
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(mission_members_fact[user_id]),
			//             USERELATIONSHIP(date_table[date], mission_members_fact[mission_start_date])
			//         )
			//     )
			
			// VAR TotalUsers = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			
			// VAR Rate = DIVIDE(JoinedUsers, TotalUsers, 0)
			
			// RETURN
			// IF(ISBLANK(Rate), 0, Rate)
			
			
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// -- Filter users based on selected campaign (or all if none selected)
			// VAR CampaignFilteredUsers =
			//     SELECTCOLUMNS(
			//         FILTER(
			//             customer_contact_info_marketing,
			//             ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//         ),
			//         "user_id", customer_contact_info_marketing[user_id]
			//     )
			
			// -- Mission joins (campaign filtered)
			// VAR joined =
			//     CALCULATE(
			//         DISTINCTCOUNT(mission_members_fact[user_id]),
			//         USERELATIONSHIP(date_table[date], mission_members_fact[mission_start_date]),
			//         TREATAS(CampaignFilteredUsers, mission_members_fact[user_id])
			//     )
			
			// -- Total users (campaign filtered)
			// VAR totalusers =
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//         TREATAS(CampaignFilteredUsers, customer_contact_info_marketing[user_id])
			//     )
			
			-- Final percentage
			VAR rate = DIVIDE([mission joins], [unique members touched], 0)
			
			RETURN
			IF(ISBLANK(rate), 0, rate)
			
			```
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: 95809259-c868-4b3f-b1e0-d0d15b87e5a3

	measure '%redeeming points' = ```
			
			// VAR RedeemingPoints = CALCULATE(DISTINCTCOUNT(points_redemptions[user_id]),USERELATIONSHIP(date_table[date],points_redemptions[redemption_date]))
			// VAR TotalUsers = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			// VAR Percentage = DIVIDE(RedeemingPoints, TotalUsers, 0) 
			// RETURN
			// IF(ISBLANK(Percentage),0,Percentage)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR StartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR EndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR TotalUsers =
			//     CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			
			// VAR RedeemingPoints =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(points_redemptions[user_id]),
			//             USERELATIONSHIP(date_table[date], points_redemptions[redemption_date]),
			//             points_redemptions[redemption_date] >= StartDate,
			//             points_redemptions[redemption_date] <= EndDate
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(points_redemptions[user_id]),
			//             USERELATIONSHIP(date_table[date], points_redemptions[redemption_date])
			//         )
			//     )
			
			// RETURN
			//     IF(ISBLANK(DIVIDE(RedeemingPoints, TotalUsers, 0)),0, DIVIDE(RedeemingPoints, TotalUsers, 0))
			
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			-- Get filtered list of user_ids from campaign
			VAR CampaignFilteredUsers =
			    SELECTCOLUMNS(
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			        "user_id", customer_contact_info_marketing[user_id]
			    )
			
			-- Redeeming users filtered by campaign
			VAR RedeemingPoints =
			    CALCULATE(
			        DISTINCTCOUNT(points_redemptions[user_id]),
			        USERELATIONSHIP(date_table[date], points_redemptions[redemption_date]),
			        TREATAS(CampaignFilteredUsers, points_redemptions[user_id])
			    )
			
			-- Total users for the selected campaign
			VAR TotalUsers =
			    CALCULATE(
			        DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			        FILTER(
			            customer_contact_info_marketing,
			            ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        )
			    )
			
			-- Final Percentage
			VAR Percentage = DIVIDE(RedeemingPoints, TotalUsers, 0)
			
			RETURN
			IF(ISBLANK(Percentage), 0, Percentage)
			
			```
		lineageTag: b1837ba1-c763-464a-8ad0-e2e63a1327b2

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '%stride completed program' = ```
			
			// var strid = CALCULATE(DISTINCTCOUNT(incentive_earning_detail[user_id]), incentive_earning_detail[activity_type] = "rewardableStride",USERELATIONSHIP(date_table[date],incentive_earning_detail[fulfillment_date]))
			
			// var totalusers = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			
			// var rate = DIVIDE(strid, totalusers, 0)
			
			// RETURN
			// IF(ISBLANK(rate),0,rate)
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR StartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR EndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR CompletedStride =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             incentive_earning_detail[activity_type] = "rewardableStride",
			//             incentive_earning_detail[fulfillment_date] >= StartDate &&
			//             incentive_earning_detail[fulfillment_date] <= EndDate,
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//             incentive_earning_detail[activity_type] = "rewardableStride",
			//             USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date])
			//         )
			//     )
			
			// VAR TotalUsers =
			//     CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]))
			
			// VAR Rate = DIVIDE(CompletedStride, TotalUsers, 0)
			
			// RETURN
			// IF(ISBLANK(Rate), 0, Rate)
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// -- Get filtered list of user_ids based on selected campaign
			// VAR CampaignFilteredUsers =
			//     SELECTCOLUMNS(
			//         FILTER(
			//             customer_contact_info_marketing,
			//             ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//         ),
			//         "user_id", customer_contact_info_marketing[user_id]
			//     )
			
			// -- Stride completions
			// VAR stride =
			//     CALCULATE(
			//         DISTINCTCOUNT(incentive_earning_detail[user_id]),
			//         incentive_earning_detail[activity_type] = "rewardableStride",
			//         USERELATIONSHIP(date_table[date], incentive_earning_detail[fulfillment_date]),
			//         TREATAS(CampaignFilteredUsers, incentive_earning_detail[user_id])
			//     )
			
			// -- Total users in campaign
			// VAR totalusers =
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//         TREATAS(CampaignFilteredUsers, customer_contact_info_marketing[user_id])
			//     )
			
			-- Calculate rate
			VAR rate = DIVIDE([stride completed program], [unique members touched], 0)
			
			RETURN
			IF(ISBLANK(rate), 0, rate)
			
			```
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: 9de0140f-1e9f-4d4d-9fba-fbcca11120d4

	measure 'direct mail' = ```
			
			// var a = CALCULATE(DISTINCTCOUNT(customer_contact_info_marketing[user_id]), 
			// customer_contact_info_marketing[channel] = "DM") 
			// RETURN
			// IF(ISBLANK(a),0,a)
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR a =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//             customer_contact_info_marketing[channel] = "DM",
			//             FILTER(
			//                 customer_contact_info_marketing,
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign &&
			//                 customer_contact_info_marketing[campaign_start_date] <= MAX('date_table'[date]) &&
			//                 customer_contact_info_marketing[campaign_end_date] >= MIN('date_table'[date])
			//             )
			//         ),
			//         CALCULATE(
			//             DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//             customer_contact_info_marketing[channel] = "DM"
			//         )
			//     )
			
			// RETURN
			// IF(ISBLANK(a), 0, a)
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR a =
			//     CALCULATE(
			//         DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			//         FILTER(
			//             customer_contact_info_marketing,
			//             customer_contact_info_marketing[channel] = "DM" &&
			//             (
			//                 ISBLANK(SelectedCampaign) ||
			//                 customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//             )
			//         )
			//     )
			
			// RETURN
			// IF(ISBLANK(a), 0, a)
			
			
			
			
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			VAR a =
			    CALCULATE(
			        DISTINCTCOUNT(customer_contact_info_marketing[user_id]),
			
			        -- Apply filters directly
			        customer_contact_info_marketing[channel] = "DM",
			        IF(
			            ISBLANK(SelectedCampaign),
			            TRUE(),
			            customer_contact_info_marketing[campaign_name] = SelectedCampaign
			        ),
			
			        -- Maintain client-level grouping
			        ALLEXCEPT(member_dimension, member_dimension[client_id_name]),
			
			        -- Use inactive relationship for date filtering
			        USERELATIONSHIP(date_table[date], customer_contact_info_marketing[date])
			    )
			
			RETURN
			IF(ISBLANK(a), 0, a)
			
			```
		formatString: #,0
		lineageTag: eea6196c-c6aa-4e5a-910d-8f6e0b9389c3

	measure 'New Other_Active_users_no' = ```
			
			
			-- Create the 'c' variable (similar to 'a' or 'b' in the other measures)
			VAR min_date_ =
			    CALCULATE(
			        MIN('date_table'[date]),
			        VALUES('date_table')
			    )
			VAR date_ =
			    CALCULATE(
			        MAX('date_table'[date]),
			        VALUES('date_table')
			    )
			    
			VAR b =
			    SELECTCOLUMNS(
			        ADDCOLUMNS(
			            SUMMARIZE(
			                FILTER(
			                    member_dimension,
			                    member_dimension[start_date] >= min_date_ &&
			                    member_dimension[start_date] <= date_
			                ),
			                member_dimension[user_id],
			                "Max_Start_Date", MAX(member_dimension[start_date])
			            ),
			            "Emp_concat", member_dimension[user_id] & "-" & [Max_Start_Date]
			        ),
			        [Emp_concat]
			    )
			    
			VAR reduction =
			    FILTER(
			        member_dimension,
			        (member_dimension[relationship_code] = "Spouse" ||
			         member_dimension[relationship_code] = "SP")
			         && (member_dimension[Concated_fiels] IN b)
			    )
			
			-- Calculating the distinct count of users based on the filtered data and the date range from StartYear to SelectedEndDate
			VAR Result = 
			    CALCULATE(
			        DISTINCTCOUNT('member_last_activity_bi'[user_id]),reduction,USERELATIONSHIP(date_table[date], 'member_last_activity_bi'[last_session_date]))
			
			-- Return the final result, returning 0 if no result is found
			RETURN
			IF(ISBLANK(Result), 0, Result)
			
			```
		formatString: 0
		lineageTag: 9b7c35a5-b737-4f9a-9ac4-cf8302936dcf

	measure 'New Emp_Active_user' = ```
			
			-- Step 1: Create the 'b' variable to store concatenated user_id and Max_Start_Date
			VAR min_date_ =
			    CALCULATE(
			        MIN('date_table'[date]),
			        VALUES('date_table')
			    )
			VAR date_ =
			    CALCULATE(
			        MAX('date_table'[date]),
			        VALUES('date_table')
			    )
			    
			VAR b =
			    SELECTCOLUMNS(
			        ADDCOLUMNS(
			            SUMMARIZE(
			                FILTER(
			                    member_dimension,
			                    member_dimension[start_date] >= min_date_ &&
			                    member_dimension[start_date] <= date_
			                ),
			                member_dimension[user_id],
			                "Max_Start_Date", MAX(member_dimension[start_date])
			            ),
			            "Emp_concat", member_dimension[user_id] & "-" & [Max_Start_Date]
			        ),
			        [Emp_concat]
			    )
			    
			VAR reduction =
			    FILTER(
			        member_dimension,
			        (member_dimension[relationship_code] = "Employee" ||
			         member_dimension[relationship_code] = "EE")
			         && (member_dimension[Concated_fiels] IN b)
			    )
			
			-- Step 3: Calculate the distinct count of user_id based on the filtered data and active relationship with the date table
			VAR Result =
			    CALCULATE(
			        DISTINCTCOUNT('member_last_activity_bi'[user_id]),reduction,USERELATIONSHIP(date_table[date],member_last_activity_bi[last_session_date]))
			
			-- Step 4: Return the result, ensuring 0 is returned if the result is blank
			RETURN
			IF(ISBLANK(Result), 0, Result)
			
			```
		formatString: 0
		lineageTag: a62ef8c7-4ff2-4300-857f-f0b568f6cc5e

	measure Active_users_no = ```
			
			// VAR SelectedEndDate = MAX('date_table'[date]) -- Get the selected end date from the slicer
			// VAR StartYear = DATE(YEAR(SelectedEndDate), 1, 1) -- Get the start of the year of the selected end date
			// VAR Result = CALCULATE(
			//     DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			//     // 'tracking_action_events'[action] = "logged in",
			//      'member_last_activity_bi'[last_session_date] >= StartYear , 'member_last_activity_bi'[last_session_date]<= SelectedEndDate, USERELATIONSHIP(date_table[date], 'member_last_activity_bi'[last_session_date]),ALL(date_table[date])
			// )
			// RETURN
			// IF(ISBLANK(Result),0,Result)
			 
			// VAR ActiveUsers = 
			//     CALCULATE(
			//         DISTINCTCOUNT('member_last_activity_bi'[user_id]))
			
			// RETURN
			// IF(
			//     ISBLANK(ActiveUsers),
			//     0,
			//     ActiveUsers
			// )
			// ----------
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			// VAR CampaignStartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         FILTER(customer_contact_info_marketing, customer_contact_info_marketing[campaign_name] = SelectedCampaign)
			//     )
			// VAR CampaignEndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         FILTER(customer_contact_info_marketing, customer_contact_info_marketing[campaign_name] = SelectedCampaign)
			//     )
			// VAR Result =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			//             FILTER(
			//                 'member_last_activity_bi',
			//                 'member_last_activity_bi'[last_session_date] >= CampaignStartDate &&
			//                 'member_last_activity_bi'[last_session_date] <= CampaignEndDate
			//             )
			//         ),
			//         -- fallback: use regular date context
			//         CALCULATE(DISTINCTCOUNT('member_last_activity_bi'[user_id]))
			//     )
			// RETURN
			// IF(ISBLANK(Result), 0, Result)
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR CampaignStartDate =
			//     CALCULATE(
			//         MIN(customer_contact_info_marketing[campaign_start_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR CampaignEndDate =
			//     CALCULATE(
			//         MAX(customer_contact_info_marketing[campaign_end_date]),
			//         customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//     )
			
			// VAR Result =
			//     IF(
			//         NOT ISBLANK(SelectedCampaign),
			//         CALCULATE(
			//             DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			//             'member_last_activity_bi'[last_session_date] >= CampaignStartDate &&
			//             'member_last_activity_bi'[last_session_date] <= CampaignEndDate
			//         ),
			//         CALCULATE(DISTINCTCOUNT('member_last_activity_bi'[user_id]))
			//     )
			
			// RETURN IF(ISBLANK(Result), 0, Result)
			
			
			VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			VAR ActiveUsers =
			    CALCULATE(
			        DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			        // ALLEXCEPT(member_dimension,member_dimension[client_id_name]),
			        TREATAS(
			            SELECTCOLUMNS(
			                FILTER(
			                    customer_contact_info_marketing,
			                    ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			                ),
			                "user_id", customer_contact_info_marketing[user_id]
			            ),
			            'member_last_activity_bi'[user_id]
			        )
			    )
			
			RETURN
			IF(
			    ISBLANK(ActiveUsers),
			    0,
			    ActiveUsers
			)
			
			
			
			// VAR SelectedCampaign = SELECTEDVALUE(customer_contact_info_marketing[campaign_name])
			
			// VAR ActiveUsers =
			//     CALCULATE(
			//         DISTINCTCOUNT('member_last_activity_bi'[user_id]),
			
			//         // Preserves client-level context
			//         ALLEXCEPT(member_dimension, member_dimension[client_id_name]),
			
			//         // Applies campaign filtering
			//         TREATAS(
			//             SELECTCOLUMNS(
			//                 FILTER(
			//                     ALL(customer_contact_info_marketing),  // Ensures all campaign data is considered
			//                     ISBLANK(SelectedCampaign) || customer_contact_info_marketing[campaign_name] = SelectedCampaign
			//                 ),
			//                 "user_id", customer_contact_info_marketing[user_id]
			//             ),
			//             'member_last_activity_bi'[user_id]
			//         )
			//     )
			
			// RETURN
			// IF(
			//     ISBLANK(ActiveUsers),
			//     0,
			//     ActiveUsers
			// )
			
			```
		formatString: 0
		lineageTag: 1775dfad-7b03-4215-be7f-c975b8eabfba

	measure 'donut website' = [total users] - [app active users]
		formatString: 0
		lineageTag: 4fc87685-12f2-4e5b-b70b-d8836ed767f8

	measure 'Group type' = ```
			
			// var a = "Group Type: " & SELECTEDVALUE('customer_contact_info_marketing'[group_type])
			// var b = CALCULATE(
			//     MAX('date_table'[date]),
			//     VALUES('date_table')
			// )
			// RETURN
			// a
			----
			// VAR GroupTypes = 
			//     CONCATENATEX(
			//         VALUES('customer_contact_info_marketing'[group_type]),
			//         'customer_contact_info_marketing'[group_type],
			//         ", "
			//     )
			
			// VAR Result = "Group Type: " & GroupTypes
			
			// RETURN
			// Result
			// -----
			
			VAR HasFilters = ISFILTERED(customer_contact_info_marketing[campaign_name]) 
			                 || ISFILTERED(customer_contact_info_marketing[group_type])
			                 || ISFILTERED(member_dimension[client_id_name])
			
			// VAR HasFilters = ISFILTERED(customer_contact_info_marketing[campaign_name]) 
			//                  || ISFILTERED(customer_contact_info_marketing[group_type])
			//                  || ISFILTERED(member_dimension[partner_id])
			//                  || ISFILTERED(member_dimension[client_id_name])
			//                  || ISFILTERED(member_dimension[affiliation_description])
			//                  || ISFILTERED(member_dimension[group_policy_number])
			//                  || ISFILTERED(member_dimension[age range])
			//                  || ISFILTERED(member_dimension[relationship_code])
			                
			
			VAR GroupTypes = 
			    CONCATENATEX(
			        VALUES('customer_contact_info_marketing'[group_type]),
			        'customer_contact_info_marketing'[group_type],
			        ", "
			    )
			
			VAR Result = 
			    IF(
			        HasFilters,
			        "Group Type: " & GroupTypes,
			        "Group Type: "  // Just the label without any value
			    )
			
			RETURN
			Result
			
			
			```
		lineageTag: e72d96c3-9f03-40c2-820d-dfabd58729ec

	measure 'trial successful logins' = ```
			
			VAR SelectedCampaignStart = 
			    CALCULATE(MIN(customer_contact_info_marketing[campaign_start_date]), ALLSELECTED(customer_contact_info_marketing[campaign_name]))
			
			VAR SelectedCampaignEnd = 
			    CALCULATE(MAX(customer_contact_info_marketing[campaign_end_date]), ALLSELECTED(customer_contact_info_marketing[campaign_name]))
			
			VAR CampaignSelected = 
			    NOT ISBLANK(SelectedCampaignStart) && NOT ISBLANK(SelectedCampaignEnd)
			
			-- Use campaign dates if selected, otherwise use regular date slicer range
			VAR min_date_ = 
			    IF(
			        CampaignSelected,
			        SelectedCampaignStart,
			        CALCULATE(MIN('date_table'[date]), VALUES('date_table'))
			    )
			
			VAR max_date_ = 
			    IF(
			        CampaignSelected,
			        SelectedCampaignEnd,
			        CALCULATE(MAX('date_table'[date]), VALUES('date_table'))
			    )
			
			VAR b =
			    SELECTCOLUMNS(
			        ADDCOLUMNS(
			            SUMMARIZE(
			                FILTER(
			                    member_dimension,
			                    member_dimension[start_date] >= min_date_ &&
			                    member_dimension[start_date] <= max_date_
			                ),
			                member_dimension[user_id],
			                "Max_Start_Date", MAX(member_dimension[start_date])
			            ),
			            "Emp_concat", member_dimension[user_id] & "-" & [Max_Start_Date]
			        ),
			        [Emp_concat]
			    )
			
			VAR reduction =
			    FILTER(
			        member_dimension,
			        member_dimension[Concated_fiels] IN b
			    )
			
			VAR a = 
			    CALCULATE(
			        DISTINCTCOUNT('customer_contact_info_marketing'[user_id]),
			        FILTER(
			            reduction,
			            'member_dimension'[terms_and_conditions_acceptance_date] <= max_date_ &&
			            NOT ISBLANK('member_dimension'[terms_and_conditions_acceptance_date])
			        ),
			        USERELATIONSHIP(date_table[date], customer_contact_info_marketing[date])
			    )
			
			RETURN IF(ISBLANK(a), 0, a)
			
			```
		formatString: 0
		lineageTag: 985e70d2-b912-454f-932a-e3f9763d7e51

	partition New_Table = m
		mode: import
		source =
				let
				    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("i44FAA==", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),
				    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Column1", type text}}),
				    #"Removed Columns" = Table.RemoveColumns(#"Changed Type",{"Column1"})
				in
				    #"Removed Columns"

	annotation PBI_ResultType = Table

